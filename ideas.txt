# -*- mode: org -*-

* text search

** postgresql-based options
http://www.postgresql.org/docs/8        .3/static/textsearch.html
http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/ (tsearch2, integrated into postgresql >=8.3)

** python-based
http://www.arnebrodowski.de/blog/add-full-text-search-to-your-django-project-with-whoosh.html (whoosh)
http://trac.whoosh.ca/ (whoosh, stemming will probably be an issue)
http://pypi.python.org/pypi/GrassyKnoll/0.3 (grassyknoll, still in alpha)
http://freshmeat.net/projects/magpy/?branch_id=60124&release_id=205199 (magpy, only a wrapper for mg)
http://lucene.apache.org/pylucene/ (pylucene, an extension for accessing lucene from python)
...

** opinions
Currently I am thinking of going the postgresql way. Especially since it supports using ispell for stemming 
and stop-word lists.


* implementation - postgresql

Diegiam žodyną.
sudo apt-get install myspell-lt

Įdiegus turėtų automatiškai pasileisti pg_updatedicts.

Sukuriame naują žodyną:
CREATE TEXT SEARCH DICTIONARY lithuanian (
    TEMPLATE = ispell,
    DictFile = system_lt_lt,
    AffFile = system_lt_lt
);

Sukuriame naują text search konfigūraciją:
CREATE TEXT SEARCH CONFIGURATION public.lt ( COPY = pg_catalog.english );
ALTER TEXT SEARCH CONFIGURATION lt
    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart,
                      word, hword, hword_part
    WITH lithuanian;

Nustatome kaip default:
SET default_text_search_config = 'public.lt';

Pabandome:
select plainto_tsquery('aukštesnioji mokytojas');


* permission checking
The roles we will probably need:
- Administrator
- Moderator
- Registered user (creating new subjects, groups, etc.)
- Group member
- Group moderator
- File owner

What is the best way to implement this? Decorators?

* model properties, case insensitive search
- [[http://www.sqlalchemy.org/docs/05/mappers.html#custom-comparators][Custom comparators]]
- [[http://www.postgresql.org/docs/8.1/interactive/indexes-expressional.html][Function indexes in postgresql]]
- 

* banner management
** banner management functionality:
- Upload banner image
- Selective display
- Click tracking ?

** selective display of banners
filter by:
- location tag
- context type [*, profile, group, subject, page]
- specific content item (by id)
- logged in users
- users in certain locations (by group location tag)

** extra
Multiple filters per banner:
everywhere in VU/MIF and all users in KTU/IF
