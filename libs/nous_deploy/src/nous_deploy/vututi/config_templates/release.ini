[DEFAULT]
# Uncomment and replace with the address which should receive any error reports
email_to = {{service.settings.email_to}}
smtp_server = localhost
error_email_from = {{service.settings.error_email_from}}
error_email = {{service.settings.error_email}}
# Ututi specific configuration variables
ututi_email_from = {{service.settings.ututi_email_from}}
ututi_info_email = {{service.settings.ututi_info_email}}
mailing_list_host = {{ service.settings.groups_host_name }}
files_path = {{ service.settings.upload_dir }}
# google_tracker = {{ service.settings.google_tracker }}
locale = lt_LT
timezone = Europe/Vilnius

[server:main]
use = egg:PasteScript#cherrypy
host = 127.0.0.1
port = {{ service.port }}

[app:main]
use = egg:ututi
full_stack = true
static_files = true
lang = lt
default_location = vu/mif

cache_dir = {{ service.settings.cache_dir }}

beaker.session.key = ututi
beaker.session.secret = somesecret
beaker.session.data_dir = {{ service.settings.session_dir }}
beaker.session.cookie_expires = false
# SQLAlchemy database URL
sqlalchemy.url = {{ service.sqlalchemy_url }}
sqlalchemy.echo = false

set debug = false

# XXX look through these and set sensible defaults
group_payment_month = 500
group_payment_quarter = 1000
group_payment_halfyear = 1500
group_file_limit = 209715200
paid_group_file_limit = 7516192768

# sentry.dsn = {{ service.sentry_dsn }}
# sentry.include_paths = ututi

# Logging configuration
[loggers]
keys = root, routes, ututi, sqlalchemy, performance, wsgi, sqlalchemyinfo

[handlers]
keys = console, perflog, accesslog, sqllog

[formatters]
keys = generic

[logger_wsgi]
level = INFO
qualname = wsgi
handlers = accesslog

[logger_root]
level = INFO
handlers = console

[logger_routes]
level = INFO
handlers =
qualname = routes.middleware
# "level = DEBUG" logs the route matched and routing variables.

[logger_performance]
level = INFO
handlers = perflog
qualname = performance
propagate = 0

[logger_ututi]
level = DEBUG
handlers =
qualname = ututi

[logger_sqlalchemyinfo]
level = INFO
qualname = sqlalchemy.engine
handlers = sqllog
propagate = 0

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_accesslog]
class = logging.handlers.RotatingFileHandler
args = ('{{ service.settings.log_dir }}/{{ service.settings.log_prefix }}access.log', 'a', 1024 * 1024, 20)
level = INFO
formatter = generic

[handler_sqllog]
class = logging.handlers.RotatingFileHandler
args = ('{{ service.settings.log_dir }}/{{ service.settings.log_prefix }}sql.log', 'a', 1024 * 1024, 20)
level = INFO
formatter = generic

[handler_perflog]
class = logging.handlers.RotatingFileHandler
args = ('{{ service.settings.log_dir }}/{{ service.settings.log_prefix }}performance.log', 'a', 1024 * 1024, 20)
level = INFO
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s

