Group creation path
===================

First of all let's log in;
    >>> browser = Browser()
    >>> browser.open('http://localhost/')
    >>> form = browser.getForm('login_form')
    >>> form.getControl('Email').value = "admin@ututi.lt"
    >>> form.getControl('Password').value = "asdasd"
    >>> form.getControl('Login').click()

We can add a group at the url /groups/add.

    >>> browser.open('http://localhost/groups/add')
    >>> browser.getControl('Group email address').value = 'test'
    >>> browser.getControl('Group title').value = 'Test group'
    >>> browser.getControl('Specify the school').value = 'Vilniaus universitetas'
    >>> browser.getControl('Save').click()

After creating the group we should be redirected to the subject selection view:

    >>> browser.printQuery('//h1/text()')
    Group Subjects
    Results:

We will skip this view for now, but it is an integral part of the group creation path.

    >>> browser.getLink('Finish choosing subjects').click()
    >>> browser.printQuery('//h1/text()')
    Group members

Let us fill in several email to be invited.
    >>> browser.getControl('Enter emails of the people You would like to invite to the group.').value='user@ututi.lt, jonas@example.com, admin@ututi.lt'
    >>> browser.getControl('Invite').click()

The users should get emails:

    >>> from ututi.lib.mailer import mail_queue
    >>> msg = mail_queue.pop().message
    >>> print msg
    MIME-Version: 1.0
    Content-Type: text/plain; charset="us-ascii"
    Content-Transfer-Encoding: 7bit
    From: info@ututi.lt
    To: jonas@example.com
    Subject: Ututi group invitation
    <BLANKLINE>
    Adminas Adminovix has invited You to join the group Test group.
    <BLANKLINE>
    Since You do not appear to be a Ututi user at the moment, to become a member of this group, You will have to register first.
    <BLANKLINE>
    You can do this by following this link: http://localhost/register/...
    <BLANKLINE>
    The Ututi team
    <BLANKLINE>

And another message, this time to somebody who already is a ututi user:

    >>> print mail_queue.pop().message
    MIME-Version: 1.0
    Content-Type: text/plain; charset="us-ascii"
    Content-Transfer-Encoding: 7bit
    From: info@ututi.lt
    To: user@ututi.lt
    Subject: Ututi group invitation
    <BLANKLINE>
    Alternative user,
    <BLANKLINE>
    Adminas Adminovix has invited You to join the group Test group.
    <BLANKLINE>
    You can accept or reject this invitation by following this link: http://localhost/group/test/invitation .
    <BLANKLINE>
    The Ututi team
    <BLANKLINE>

Now, if we were to sign in as this 'alternative user' user, we should see a flash message notifying us of the
invitation.

    >>> browser2 = Browser()
    >>> browser2.open('http://localhost/')
    >>> form = browser2.getForm('login_form')
    >>> form.getControl('Email').value = "user@ututi.lt"
    >>> form.getControl('Password').value = "password"
    >>> form.getControl('Login').click()

    >>> browser2.printQuery("//div[@class='flash-message']/span/text()")
    <BLANKLINE>
    Adminas Adminovix has sent you an invitation to group Test group. Do You want to become a member of this group?
    <BLANKLINE>


#
import os
import unittest
import subprocess
import shutil
from datetime import date

from pkg_resources import resource_string, resource_stream

from zope.testing import doctest

from pylons import config

from nous.mailpost import processEmailAndPost

import ututi
from ututi.model import Group, meta, LocationTag, User, Subject, Email

def ftest_setUp(test):
    ututi.tests.setUp(test)

    u = User.get('admin@ututi.lt')
    meta.Session.execute("SET ututi.active_user TO %d" % u.id)
    g = Group('moderators', u'Moderatoriai', LocationTag.get(u'vu'), date(date.today().year, 1, 1), u'U2ti moderatoriai.')
    meta.Session.add(g)
    g.add_member(u, True)

    #add an alternative user
    alt_user = User(u'Alternative user', 'password', False)
    meta.Session.add(alt_user)
    email = Email('user@ututi.lt')
    email.confirmed = True
    alt_user.emails.append(email)



    meta.Session.add(Subject(u'mat_analize', u'Matematin\u0117 analiz\u0117', LocationTag.get(u'vu'), u'prof. E. Misevi\u010dius'))
    meta.Session.commit()
    meta.Session.execute("SET ututi.active_user TO 0")


def collect_ftests(package=None, level=None, layer=None, filenames=None,
                   exclude=None):
    """Collect all functional doctest files in a given package.

    If `package` is None, looks up the call stack for the right module.

    Returns a unittest.TestSuite.
    """
    package = doctest._normalize_module(package)
    testdir = os.path.dirname(package.__file__)
    if filenames is None:
        filenames = [fn for fn in os.listdir(testdir)
                     if fn.endswith('.txt') and not fn.startswith('.')]
    if exclude is not None:
        for fn in exclude:
            filenames.remove(fn)
    optionflags = (doctest.ELLIPSIS | doctest.REPORT_NDIFF |
                   doctest.NORMALIZE_WHITESPACE |
                   doctest.REPORT_ONLY_FIRST_FAILURE)
    suites = []
    for filename in filenames:
        suite = doctest.DocFileSuite(filename,
                                     package=package,
                                     optionflags=optionflags,
                                     setUp=ftest_setUp,
                                     tearDown=ututi.tests.tearDown)
        suite.layer = ututi.tests.PylonsLayer
        if level is not None:
            suite.level = level
        suites.append(suite)
    return unittest.TestSuite(suites)


def listUploads(files_path=None):
    if files_path is None:
        files_path = config['files_path']
    for dir_name, subdirs, files in os.walk(files_path):
        if files:
            for file_name in files:
                full_name = os.path.join(dir_name, file_name)
                print full_name.replace(files_path, "/uploads")


def send_test_message(email_file, message_id, to, reply_to=None):
    message = resource_string("ututi.tests.functional.emails", email_file)
    if reply_to is not None:
        reply_to = "\nIn-Reply-To: <%s>" % reply_to
    else:
        reply_to = ''
    processEmailAndPost('http://localhost/got_mail',
                        message % {'message_id': message_id,
                                   'to': to,
                                   'reply_to': reply_to},
                        config['files_path'])


def make_file(filename):
    stream = resource_stream("ututi.tests.functional.import", filename)
    return (stream, 'text/plain', filename)


def import_csv(browser, formname, filename):
    browser.open('http://localhost/admin')
    form = browser.getForm(name=formname)
    form.getControl('CSV File').add_file(*make_file(filename))
    form.getControl('Upload').click()


def dump_database():

    executable = "/usr/lib/postgresql/8.3/bin/pg_dump"
    path = os.path.join(config['global_conf']['here'], 'instance/var/run')
    os.environ["PGPORT"] = os.environ.get("PGPORT", "4455")

    p = subprocess.Popen([executable, "test", "-Fc", "-O", "-h", path],
                         stdout=subprocess.PIPE)
    shutil.copyfileobj(p.stdout, open("dbdump", "w"))
    shutil.rmtree("files_dump", ignore_errors=True)
    shutil.copytree(config["files_path"], "files_dump")

Let's get the url from the first message

    >>> from  ututi.lib.helpers import get_urls
    >>> print get_urls(msg)
    ['http://localhost/register/...']

First let us log out.

     >>> browser.getLink('Log out').click()
     >>> browser.open(get_urls(msg)[0])
     >>> browser.printQuery('//h1/text()')
     UTUTI - student information online

Let us fill out the registration form

     >>> form = browser.getForm(id='registration_form')
     >>> form.getControl('Fullname').value = 'Jonas Petraitis Petrauskas'
     >>> form.getControl('Email').value = 'jonas@example.com'
     >>> form.getControl('Password').value = 'asdfgh'
     >>> form.getControl('Repeat password').value = 'asdfgh'
     >>> form.getControl('Register').click()

We should get an email confirmation request:
     >>> print mail_queue.pop().message
     MIME-Version: 1.0
     Content-Type: text/plain; charset="us-ascii"
     Content-Transfer-Encoding: 7bit
     From: info@ututi.lt
     To: jonas@example.com
     Subject: Confirm the email for Ututi
     <BLANKLINE>
     We have received a request to confirm the ownership of this email by Jonas Petraitis Petrauskas on the Ututi system. If this email belongs to You, confirm it by clicking on this link:
     <BLANKLINE>
     http://localhost/confirm_user_email/...
     <BLANKLINE>
     Ututi team
     <BLANKLINE>

And we are redirected to the group that invited us.

     >>> browser.url
     'http://localhost/group/test'

