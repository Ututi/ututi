Subject adding and import
=========================

A list of all subjects is shown at /subjects.

    >>> browser = Browser.logIn()

    >>> browser.open('http://localhost/admin/subjects')
    >>> browser.printQuery("id('subject_list')//li/a[@class='subject-link']/text()")
    Matematin&#279; analiz&#279;

The link of the subject leads to its home page...
Well, let's explore how this actually works.
1) if the subject has no description, files or wiki,
   homepage asks user to create content,
2) if subject has a description, homepage always displays
   this description,
3) if subject has no description, but other content (files or wiki),
   user is directed to the feed page, so he can see the activity.
Let's check that it is actually so!

    >>> browser.getLink('Matematinė analizė').url
    'http://localhost/subject/vu/mat_analize'

    >>> browser.getLink('Matematinė analizė').click()
    >>> browser.url
    'http://localhost/subject/vu/mat_analize'

    >>> browser.printQuery("id('subject-intro-block')//text()")
    Edit
    What is a subject page?
    ...

We can edit the subject from here, add description and some other info.

    >>> browser.open('http://localhost/subject/vu/mat_analize/edit')
    >>> browser.getControl('Lecturer').value = 'Some other guy'
    >>> browser.getControl('Brief description of the subject').value = 'This is the subject description'
    >>> browser.getControl('Save').click()

Home page now displays this page description:

    >>> browser.url
    'http://localhost/subject/vu/mat_analize'

    >>> browser.printQuery("id('subject_description')//text()")
    This is the subject description
    Edit

Lets remove the description, add a wiki page, and assert that
homepage will redirect us to the subject feed:

    >>> browser.open('http://localhost/subject/vu/mat_analize/edit')
    >>> browser.getControl('Brief description of the subject').value = ''
    >>> browser.getControl('Save').click()
    >>> browser.url
    'http://localhost/subject/vu/mat_analize'

    >>> browser.getLink('Notes').click()
    >>> browser.getControl('Create new Wiki note').click()
    >>> browser.getControl('Title').value = 'Wiki document title'
    >>> browser.getControl('Content').value = 'Wiki document content'
    >>> browser.getControl('Save').click()
    >>> browser.url
    'http://localhost/subject/vu/mat_analize/note/4'

    >>> browser.open('http://localhost/subject/vu/mat_analize')
    >>> browser.url
    'http://localhost/subject/vu/mat_analize/feed'

The changed information should be visible in the sidebar blocks:

    >>> browser.printCssQuery('#subject-information-portlet .description', strip=True)
    >>> browser.printCssQuery('#subject-teachers-portlet .subject-teacher', strip=True)
    <li>
    Lecturer:
    <br />
    Some other guy
    </li>

The subject's portlet contains a link that can be used to start watching the subject.

    >>> browser.getControl('Follow').click()
    >>> browser.printQuery("//div[@class='flash-message']/span/text()")
    The subject has been added to your watched subjects list.

If we click the link again, we stop watching the subject

    >>> browser.getControl('Unfollow').click()
    >>> browser.printQuery("//div[@class='flash-message']/span/text()")
    The subject has been removed from your watched subjects list.

And the button's action turns into 'Follow' again:

    >>> browser.getControl('Follow')
    <SubmitControl name=None type='submitbutton'>

We can add a subject using the wizard at the url /subject/add:

    >>> browser.open('http://localhost/subjects/add')
    >>> browser.getControl(name='location-0').value = 'vu'
    >>> browser.getControl('Subject title:').value = 'Test subject'
    >>> browser.getControl('Next').click()
    >>> print browser.url
    http://localhost/subjects/add_description
    >>> browser.getControl('Create').click()
    >>> print browser.url
    http://localhost/subject/vu/test_subject

Ututi tries to prevent creation of duplicate subjects:

    >>> browser.open('http://localhost/subjects/add')
    >>> browser.getControl(name='location-0').value = 'vu'
    >>> browser.getControl('Subject title:').value = 'Test subject'
    >>> browser.getControl('Next').click()
    >>> print browser.url
    http://localhost/subjects/lookup
    >>> browser.printCssQuery('p.warning', strip=True)
    <p>Please check that your subject is not in the list below.</p>
    >>> browser.printCssQuery('.search-results-container .item-title a', strip=True)
    <a>Test subject</a>

User can create the subject anyway. Subject id is always checked for uniqueness.

    >>> browser.getControl('Next').click()
    >>> print browser.url
    http://localhost/subjects/add_description?
    >>> browser.getControl('Lecturer:').value = 'Some guy'
    >>> browser.getControl('Create').click()
    >>> print browser.url
    http://localhost/subject/vu/test_subject-some_guy

Bug fix confirmation: going to subjects/create directly (e.g. refreshing a failed subject form)
would cause a crash

    >>> browser.open('http://localhost/subjects/create')
    >>> print browser.url
    http://localhost/subjects/add

When creating a subject, the user can select to watch it:

    >>> browser.open('/home')
    >>> browser.getLink('Add subject').click()
    >>> browser.url
    'http://localhost/subjects/add'

    >>> browser.getControl(name='location-0').value = 'vu'
    >>> browser.getControl('Subject title:').value = 'Testing subject'
    >>> browser.getControl('Next').click()
    >>> print browser.url
    http://localhost/subjects/lookup
    >>> browser.printCssQuery('.search-results-container .item-title a', strip=True)
    <a>Test subject</a>
    <a>Test subject</a>
    >>> browser.getControl('Next').click()
    >>> browser.getControl('Lecturer:').value = 'Some guy'
    >>> browser.getControl('I want to follow this subject').selected = True
    >>> browser.getControl('Create').click()
    >>> print browser.url
    http://localhost/subject/vu/testing_subject

    >>> browser.printQuery("//div[@class='flash-message']/span/text()")
    You are now watching the subject Testing subject

    >>> browser.open('/profile/watch_subjects')
    >>> browser.printQuery("id('watched_subjects')//text()")
    Testing subject

Subject names with parentheses should not cause problems:

    >>> browser.open('/home')
    >>> browser.getLink('Add subject').click()
    >>> browser.url
    'http://localhost/subjects/add'

    >>> browser.getControl(name='location-0').value = 'vu'
    >>> browser.getControl('Subject title:').value = 'Šiuolaikinė anglų kalba (akademinis skaitymas)'
    >>> browser.getControl('Next').click()
    >>> browser.getControl('Create').click()
    >>> print browser.url
    http://localhost/subject/vu/siuolaikine_anglu_ka
