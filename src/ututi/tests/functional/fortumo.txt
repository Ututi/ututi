Fortumo SMS payments
--------------------

This test goes through Fortumo SMS payment handlers.

We'll first check the common part of all payment handlers. We'll use
the personal SMS deposit action as an example.

Signatures
----------

The Fortumo signature of incoming notifications is checked:

    >>> app.get('/fortumo/personal_sms_credits?test=test&sender=123&sig=123')
    Traceback (most recent call last):
    ...
    ValueError: Invalid Fortumo signature!

Let's construct a proper signature.

(Keep this in sync with development.ini:)

    >>> from pylons import config
    >>> config['fortumo.personal_sms_credits.secret'] = '1541796ef4ac15e96c0d8fcabf60e806'
    >>> config['fortumo.group_space_small.secret'] = '1e5962f5bd7e9926014b3ea3f4cdec61'
    >>> config['fortumo.group_space_large.secret'] = '1a357a4bea2fa52c9927b17cfe40cfb3'
    >>> config['fortumo.group_message.secret'] = '32eebb638597dec58c39a34b85afc7b4'

We'll define a helper:

    >>> from ututi.model import ReceivedSMSMessage
    >>> import urllib
    >>> def make_request(message_type, params):
    ...     params['test'] = 'test'
    ...     msg = ReceivedSMSMessage(message_type, 'http://test/fortumo/%s?%s' % (message_type, urllib.urlencode(params)))
    ...     sig = msg.calculate_fortumo_sig()
    ...     params['sig'] = sig
    ...     return app.get('/fortumo/%s?%s' % (message_type, urllib.urlencode(params)))

Also, we will register a user with a mobile phone:

    >>> from ututi.model import User, meta
    >>> user = User.get('user@ututi.lt')
    >>> user.phone_number = '+37067812345'
    >>> user.phone_confirmed = True
    >>> meta.Session.commit()

    ##>>> browser = Browser.logIn('user@ututi.lt', 'password')
    ##>>> browser.open('http://localhost/profile/edit')
    ##>>> browser.getControl(name='phone_number').value = "+37067812345"
    ##>>> browser.getControl('Update contacts').click()

    ##>>> from ututi.model import SMS, meta
    ##>>> from ututi.model import meta
    ##>>> sms = meta.Session.query(SMS).all()
    ##>>> confirmation_key = sms[0].message_text.split()[-1]

    ##>>> browser.getControl(name='phone_confirmation_key').value = confirmation_key
    ##>>> browser.getControl('Submit code').click()

Now let's try to make a request.

    >>> make_request('personal_sms_credits', dict(sender='37067812345')).body
    'You have purchased 100 SMS messages for 10 Lt; now you have 100 messages.'

Seems to work.

    >>> make_request('personal_sms_credits', dict(sender='37067812345')).body
    'You have purchased 100 SMS messages for 10 Lt; now you have 200 messages.'

Logging
-------

The requests should have been logged in the database:

    >>> from ututi.model import ReceivedSMSMessage
    >>> msgs = meta.Session.query(ReceivedSMSMessage).all()
    >>> for msg in msgs:
    ...     print msg.request_url
    http://localhost/fortumo/personal_sms_credits?test=test&sender=123&sig=123
    http://localhost/fortumo/personal_sms_credits?test=test&sig=...&sender=37067812345
    http://localhost/fortumo/personal_sms_credits?test=test&sig=...&sender=37067812345

The success attribute indicates if the notification was processed:

    >>> for msg in msgs:
    ...     print msg.success
    False
    True
    True

Some other useful attributes are stored on the message:

    >>> msg = msgs[-1]
    >>> msg.test
    True
    >>> msg.message_text
    >>> msg.sender_phone_number
    '37067812345'
    >>> msg.sender.fullname
    u'Alternative user'

Personal SMS deposit
--------------------

Works, as already shown:

    >>> make_request('personal_sms_credits', dict(sender='37067812345')).body
    'You have purchased 100 SMS messages for 10 Lt; now you have 300 messages.'

If the sender is not registered in Ututi, an error is returned:

    >>> make_request('personal_sms_credits', dict(sender='37067866666')).body
    'Your phone number (+37067866666) is not registered in Ututi.'

Group space
-----------

We will need a group:

    >>> browser2 = Browser.logIn('user@ututi.lt', 'password')
    >>> browser2.open('http://localhost/groups/group_type')
    >>> browser2.getControl(name='create-public-group').click()
    >>> browser2.getControl('Group address on the web').value = 'testgroup'
    >>> browser2.getControl('Group title').value = 'Test group'
    >>> browser2.getControl(name='location-0').value = 'Vilniaus universitetas'
    >>> browser2.getControl('Continue').click()
    >>> browser2.getControl("Continue").click()

You can buy credits for group space by SMS:

    >>> make_request('group_space_small',
    ...              dict(sender='37067812345', message='testgroup')).body
    'Added 2 credits to group space account; now there are 2.'
    >>> make_request('group_space_large',
    ...              dict(sender='37067812345', message='testgroup')).body
    'Added 10 credits to group space account; now there are 12.'

If you specify an invalid group id, you will get an error:

    >>> make_request('group_space_large',
    ...              dict(sender='37067812345', message='foobar')).body
    'Invalid group: foobar'


Message to group
----------------

You can send an SMS to the entire group:

    >>> make_request('group_message',
    ...              dict(sender='37067812345', message='testgroup Hello!')).body
    'SMS message sent to group testgroup.'

Unregistered users may not send a message to the group:

    >>> make_request('group_message',
    ...              dict(sender='stalker', message='testgroup Hello!')).body
    'The phone number stalker is not associated with a Ututi user'

You need to specify the group properly:

    >>> make_request('group_message',
    ...              dict(sender='37067812345', message='foobar')).body
    'Invalid group message: foobar'

You need to specify an existing group:

    >>> make_request('group_message',
    ...              dict(sender='37067812345', message='foobar Hello!')).body
    'Invalid group: foobar'
