User profiles
=============

    >>> from pkg_resources import resource_stream
    >>> from ututi.tests.functional import make_file

Each user will have a profile that is accessible via the url /user/{id}.

    >>> browser = Browser()
    >>> browser.open('http://localhost/user/1')
    >>> browser.printQuery('//h1/text()')
    Adminas Adminovix

Now we'll try editing our profile information. First we need to log in.

    >>> browser = Browser.logIn()

    >>> browser.printCssQuery('.user-fullname', strip=True)
    <div>Adminas Adminovix</div>

The user should be able to change his email:

    >>> browser.open('http://localhost/profile/edit/contacts')
    >>> form = browser.getForm('contacts-form')
    >>> form.getControl('Your email address').value = 'user@ututi.lt'
    >>> form.getControl('Save').click()

This email is already in use, so we won't be able to use it.

    >>> browser.printQuery("//span[@class='error-message']/text()")
    This email is already in use.

Let's try something unique

    >>> browser.open('http://localhost/profile/edit/contacts')
    >>> form = browser.getForm('contacts-form')
    >>> form.getControl('Your email address').value = 'uniqueuser@ututi.lt'
    >>> form.getControl('Save').click()

    >>> browser.printQuery("//span[@class='error-message']/text()")

There should be an email confirmation request in our inbox:

    >>> from ututi.lib.mailer import mail_queue
    >>> len(mail_queue)
    1
    >>> mail_queue[:] = []


We'll go to our profile edit page, change our name, add some additional
information and upload a photo.

    >>> browser.open('http://localhost/profile/edit')
    >>> browser.getControl('Full name').value = 'Adminas Adminas'
    >>> browser.getControl('About yourself').value = 'This is me'
    >>> browser.getControl('Save', index=0).click()
    >>> browser.click('Contacts')
    >>> browser.getControl('Address of your website or blog').value = 'http://ututi.lt'
    >>> browser.click('Save')
    >>> browser.click('General')
    >>> browser.getControl(name='logo').add_file(*make_file('test_logo.png', 'test_logo.Png'))
    >>> browser.click('Change photo')

    >>> browser.printCssQuery('.user-fullname', strip=True)
    <div>Adminas Adminas</div>

Let's check out the logo.

    >>> browser.open('http://localhost/user/1/logo/45/60')

The content type should be PNG (all resized images are served as PNGs).

    >>> browser.headers['content-type']
    'image/png'

The size of the image should be as was specified in the request.

    >>> from PIL import Image
    >>> import StringIO
    >>> im = Image.open(StringIO.StringIO(browser.contents))
    >>> im.size
    (45, 45)

The original logo can be retrieved too:

    >>> browser.open('http://localhost/user/1/logo')
    >>> im = Image.open(StringIO.StringIO(browser.contents))
    >>> im.size
    (100, 100)

Logos are automatically resized if they are too big before storing
them in the database:

    >>> browser.open('http://localhost/profile/edit/photo')
    >>> browser.getControl(name='logo').add_file(*make_file('test_logo_huge.png', 'test_logo.Png'))
    >>> browser.getControl('Change photo').click()

    >>> browser.open('http://localhost/user/1/logo')
    >>> im = Image.open(StringIO.StringIO(browser.contents))
    >>> im.size
    (300, 300)

Now let's try to delete the logo.

    >>> browser.open('http://localhost/profile/edit/photo')
    >>> browser.click('Remove')

The logo is gone from the profile page:

    >>> browser.printQuery("id('personal-box')//div[@class='personal-logo']/img")

And you can't download it anymore:

    >>> browser.open('http://localhost/user/1/logo/45/60')

Let's try uploading a logo that uses CMYK color space:

    >>> browser.open('http://localhost/profile/edit/photo')
    >>> browser.getControl(name='logo').add_file(*make_file('test_logo_cmyk.jpg', 'test_logo.jpg'))
    >>> browser.getControl('Change photo').click()

Let's check out the logo again.

    >>> browser.open('http://localhost/user/1/logo/45/60')

The content type should be PNG even though we uploaded a jpeg.

    >>> browser.headers['content-type']
    'image/png'
