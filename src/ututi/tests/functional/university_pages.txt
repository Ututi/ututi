University and faculty pages
============================

    >>> from pkg_resources import resource_stream
    >>> from ututi.tests.functional import make_file

Let's look at public universities page.

    >>> public_browser = Browser()
    >>> public_browser.open('http://localhost/browse')

We should be able to click on a link that leads us to the page of the faculty.
    >>> public_browser.getLink('Vilniaus universitetas').click()
    >>> public_browser.url
    'http://localhost/school/vu/about'

    >>> public_browser.printCssQuery('h1', strip=True)
    <h1>Vilniaus universitetas</h1>

    >>> public_browser.printCssQuery('.sub-title', strip=True)
    <div>
    Welcome to the social network of <a>Vilniaus universitetas</a>!
    </div>

    >>> public_browser.printCssQuery('.university-box .title a', strip=True)
    <a>Ekonomikos fakultetas</a>
    <a>Geografijos fakultetas</a>

There is a search form on this page and we should be able to use it.

    >>> public_browser.getLink('subjects').click()
    >>> public_browser.getControl(name='text').value = 'MatematinÄ—'
    >>> public_browser.getControl('Search').click()
    >>> public_browser.printCssQuery('#search-results .item-title', strip=True)
    <div> <a>Matematin&#279; analiz&#279;</a> </div>

Regresion test: if search returns an empty set, it should display 0 results
message instead of a there-are-no-subjects-at-all message:

    >>> public_browser.getControl(name='text').value = 'somethingveryspecial'
    >>> public_browser.getControl('Search').click()
    >>> public_browser.printCssQuery('.result-count', strip=True)
    <span> 0 results for <strong>somethingveryspecial</strong> </span>

Let's log and test university page from logedin user's perpectives.

    >>> browser = Browser.logIn()
    >>> browser.open('http://localhost/structure')

    >>> browser.printQuery("id('location_structure')//li/a[@class='tag_link']/text()")
    U-niversity
    D-epartment
    Vilniaus universitetas
    Ekonomikos fakultetas
    Geografijos fakultetas

    >>> browser.getLink('Vilniaus universitetas').click()

An information portlet appears and shows some statistics about the university:

    >>> browser.printCssQuery("#location-info-portlet li", strip=True)
    <li>1 Subject</li>
    <li>1 Group</li>
    <li>0 Members</li>
    <li>0 Files</li>


We should be able to edit the information of the location tag.

    >>> browser.getLink('Edit information').click()
    >>> browser.getControl('Full University title').value = 'Kapsuko universitetas'
    >>> browser.getControl('Short title').value = 'KU'
    >>> browser.getControl('Country').displayValue = ['Lithuania']
    >>> browser.getControl('University website').value = 'http://ku.lt'
    >>> browser.getControl('Teachers url').value = 'http://ku.lt/teachers'
    >>> browser.getControl('Save').click()

We have updated information successfully.

    >>> browser.printCssQuery('.flash-message-content')
    <span class="flash-message-content">Information updated.</span>

    >>> browser.getControl('Full University title').value
    'Kapsuko universitetas'
    >>> browser.getControl('Short title').value
    'ku'
    >>> browser.getControl('Country').displayValue
    ['Lithuania']
    >>> browser.getControl('University website').value
    'http://ku.lt'
    >>> browser.getControl('Teachers url').value
    'http://ku.lt/teachers'

And the updated information should be visible in the university page:
    >>> browser.open('http://localhost/school/ku')
    >>> browser.printCssQuery(".page-title", strip=True)
    <h1>Kapsuko universitetas</h1>
    >>> browser.printCssQuery("#location-info-portlet a", strip=True)
    <a>http://ku.lt</a>

Let's see if the faculty page looks ok.
    >>> browser.open('http://localhost/school/ku/gf')

    >>> browser.printCssQuery(".page-title", strip=True)
    <h1>Geografijos fakultetas</h1>
    >>> browser.printCssQuery("#location-info-portlet li", strip=True)
    <li>0 Subjects</li>
    <li>0 Groups</li>
    <li>0 Members</li>
    <li>0 Files</li>

Let's try to edit it.

    >>> browser.getLink('Edit information').click()
    >>> browser.getControl('Country').displayValue = ['Lithuania']
    >>> browser.getControl('Save').click()

We should only be able to enter URL-ready short titles:

    >>> browser.getControl('Short title').value = 'Text with breaks'
    >>> browser.getControl('Save').click()
    >>> browser.printQuery("//span[@class='error-message']/text()")
    The field may only contain letters, numbers and the characters + - _ and . (dot)

What is more, these fields should be allowed to clash with existing ones:
    >>> browser.getControl('Short title').value = 'ef'
    >>> browser.getControl('Save').click()
    >>> browser.printQuery("//span[@class='error-message']/text()")
    Such short title already exists, choose a different one.

Even with a different case:
    >>> browser.getControl('Short title').value = 'EF'
    >>> browser.getControl('Save').click()
    >>> browser.printQuery("//span[@class='error-message']/text()")
    Such short title already exists, choose a different one.

They need to be unique.

    >>> browser.getControl('Short title').value = 'ggf'
    >>> browser.getControl('Save').click()

Oh, and we can upload logos too:

    >>> browser.getControl(name='logo').add_file(*make_file('test_logo.png'))
    >>> browser.getControl('Change logo').click()
    >>> browser.printQuery("//span[@class='error-message']/text()")

    >>> browser.open('http://localhost/school/ku/ggf/feed')
    >>> browser.printCssQuery("#location-logo-portlet img")
    <img src="/structure/5/logo/140" alt="Geografijos fakultetas" />

    >>> browser.open('http://localhost/school/ku/ggf')
    >>> browser.getLink('subjects').click()
    >>> browser.url
    'http://localhost/school/ku/ggf/subjects'

    >>> browser.open('http://localhost/school/ku')
    >>> browser.getLink('subjects').click()
    >>> browser.url
    'http://localhost/school/ku/subjects'

    >>> browser.open('http://localhost/school/ku/ggf')
    >>> browser.getLink('teachers').click()
    >>> browser.url
    'http://localhost/school/ku/ggf/teachers'

    >>> browser.open('http://localhost/school/ku')
    >>> browser.getLink('teachers').click()
    >>> browser.url
    'http://localhost/school/ku/teachers'
