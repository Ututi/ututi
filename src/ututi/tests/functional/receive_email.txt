Test for email receiving controler
==================================

Emails received by postfix are posted to the application and are
received by the ReceivemailController. We are using a function from
nous.mailpost to post the email from the same process as the tests are
running in, this allows us to replace urllib2 with a wsgi_intercept
version and send the actual message directly to the ututi wsgi
application.

    >>> from pylons import config
    >>> files_path = config['files_path']
    >>> from ututi.tests.functional import listUploads, send_test_message

Let's send an email to the system:

    >>> send_test_message("simple_email.txt",
    ...                   "20090615140531.GA23780@my_pc",
    ...                   'moderators@lists.ututi.lt')

All emails received will get forwarded to the members who have joined
ututi:

    >>> from ututi.lib.mailer import mail_queue
    >>> email = mail_queue.pop()
    >>> print email.message
    Return-Path: <admin@ututi.lt>
    Date: Mon, 15 Jun 2009 17:05:31 +0300
    From: Admin <admin@ututi.lt>
    To: moderators@lists.ututi.lt
    Reply-To: moderators@lists.ututi.lt
    Subject: Hello
    Message-ID: <20090615140531.GA23780@my_pc>
    MIME-Version: 1.0
    Content-Disposition: inline
    User-Agent: Mutt/1.5.18 (2008-05-17)
    Content-Type: text/plain; charset=us-ascii
    Errors-To: errors@ututi.lt
    List-Id: moderators@lists.ututi.lt
    <BLANKLINE>
    Hi, I am just writing to tell you how wonderful this system is.
    <BLANKLINE>
    Admin

    >>> print email.recipients
    ['admin@ututi.lt']

As the email had no attachments, we have no new files in our upload directory:

    >>> listUploads()

But if someone would sent an email with an attachment, it sure would get stored:

    >>> send_test_message("email_with_attachment.txt",
    ...                   '20090615145515.GA13471@my_pc',
    ...                   'moderators@lists.ututi.lt')
    >>> listUploads()
    /uploads/cb396bb6/487560f2/6de19949/6051b42e

Not just stored, it should appear in the files list:

    >>> browser = Browser.logIn()
    >>> browser.open('http://localhost/files')

    >>> browser.printQuery('id("file_list")//a')
    <a href="/files/get/..." class="file-link">README.txt</a>

Also it would be stripped from the actual email and replaced with a
link to the file on our system:

    >>> email = mail_queue.pop()

    >>> print email.message
    Return-Path: <admin@ututi.lt>
    Date: Mon, 15 Jun 2009 17:55:15 +0300
    From: Admin <admin@ututi.lt>
    To: moderators@lists.ututi.lt
    Subject: Also - an attachment
    Message-ID: <20090615145515.GA13471@my_pc>
    MIME-Version: 1.0
    Content-Disposition: inline
    User-Agent: Mutt/1.5.18 (2008-05-17)
    Reply-To: moderators@lists.ututi.lt
    Errors-To: errors@ututi.lt
    List-Id: moderators@lists.ututi.lt
    Content-Type: multipart/mixed; boundary="ZGiS0Q5IWpPtfppv"; charset="utf-8"
    Content-Transfer-Encoding: base64
    <BLANKLINE>
    QWxzbywgSSBqdXN0IHdhbnRlZCB0byBzZW5kIHlvdSB0aGlzIGZpbGU6Cgo8YSBocmVmPSJodHRw
    Oi8vbG9jYWxob3N0L2ZpbGVzL2dldC81Ij5SRUFETUUudHh0PC9hPg==
    <BLANKLINE>

    >>> print email.payload()
    Also, I just wanted to send you this file:
    <BLANKLINE>
    <a href="http://localhost/files/get/5">README.txt</a>

    >>> print email.recipients
    ['admin@ututi.lt']

If we upload the same file twice - we should see it two times in the
mailing list, but still only have 1 copy of the file in the files
repository:

    >>> send_test_message("email_with_attachment.txt",
    ...                   '20090615145515.GA13472@my_pc',
    ...                   'moderators@lists.ututi.lt')

    >>> listUploads()
    /uploads/cb396bb6/487560f2/6de19949/6051b42e

    >>> browser.reload()

    >>> browser.printQuery('id("file_list")//a')
    <a href="/files/get/5" class="file-link">README.txt</a>
    <a href="/files/get/7" class="file-link">README.txt</a>

But the link in the email will point to the other "file" entry in the
list of files:

    >>> email = mail_queue.pop()
    >>> print email.message
    Return-Path: <admin@ututi.lt>
    Date: Mon, 15 Jun 2009 17:55:15 +0300
    From: Admin <admin@ututi.lt>
    To: moderators@lists.ututi.lt
    Subject: Also - an attachment
    Message-ID: <20090615145515.GA13472@my_pc>
    MIME-Version: 1.0
    Content-Disposition: inline
    User-Agent: Mutt/1.5.18 (2008-05-17)
    Reply-To: moderators@lists.ututi.lt
    Errors-To: errors@ututi.lt
    List-Id: moderators@lists.ututi.lt
    Content-Type: multipart/mixed; boundary="ZGiS0Q5IWpPtfppv"; charset="utf-8"
    Content-Transfer-Encoding: base64
    <BLANKLINE>
    QWxzbywgSSBqdXN0IHdhbnRlZCB0byBzZW5kIHlvdSB0aGlzIGZpbGU6Cgo8YSBocmVmPSJodHRw
    Oi8vbG9jYWxob3N0L2ZpbGVzL2dldC83Ij5SRUFETUUudHh0PC9hPg==
    <BLANKLINE>

    >>> print email.payload()
    Also, I just wanted to send you this file:
    <BLANKLINE>
    <a href="http://localhost/files/get/7">README.txt</a>

    >>> browser.getLink('README.txt').click()
    >>> browser.printContents()
    I am a file!

Now if we upload the same file using our web ui, it still should not
add any additional files to the repository:

    >>> import os
    >>> file = open(os.path.join(files_path, 'cb396bb6/487560f2/6de19949/6051b42e'))

    >>> browser.open('http://localhost/files')
    >>> browser.getControl('Title').value = "file.txt"
    >>> browser.getControl('Upload').add_file(file, 'text/plain', 'file.txt')
    >>> browser.getControl('Save').click()

    >>> listUploads()
    /uploads/cb396bb6/487560f2/6de19949/6051b42e

    >>> browser.printQuery('id("file_list")//a')
    <a href="/files/get/..." class="file-link">README.txt</a>
    <a href="/files/get/..." class="file-link">README.txt</a>
    <a href="/files/get/..." class="file-link">file.txt</a>

If a message gets posted more than once, it is simply ignored:

    >>> send_test_message("email_with_attachment.txt",
    ...                   '20090615145515.GA13472@my_pc',
    ...                   'moderators@lists.ututi.lt')
    >>> browser.open('http://localhost/files')
    >>> browser.printQuery('id("file_list")//a')
    <a href="/files/get/..." class="file-link">README.txt</a>
    <a href="/files/get/..." class="file-link">README.txt</a>
    <a href="/files/get/..." class="file-link">file.txt</a>

    >>> mail_queue
    []

# XXX users need primary emails or emails associated with specific groups
