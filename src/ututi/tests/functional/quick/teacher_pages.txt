Test teacher's information page functionality
===========================================

    >>> from ututi.lib.mailer import mail_queue
    >>> from ututi.lib.helpers import get_urls

User may press "I teach here" button in university page and have
the same registration flow as any other user. In the end, he
will be registered as teacher:

    >>> user = Browser()
    >>> user.open('http://localhost/school/uni')
    >>> user.click('I teach here')
    >>> user.getControl('Enter your academic email').value = 'user@example.com'
    >>> user.click('Sign Up')
    >>> msg = mail_queue.pop()
    >>> urls = get_urls(msg.payload())
    >>> user.open(urls[0])
    >>> user.click('Next')
    >>> user.getControl('Full name').value = 'User'
    >>> user.getControl('Password').value = 'password'
    >>> user.click('Next')
    >>> user.click('Skip')
    >>> user.click('Finish')

For the first time text area contains a template that teacher can edit.
It also displays a related warning message:

    >>> user.click('Edit my page')
    >>> user.click('General Information')
    >>> print user.getControl('Edit your information').value
    Provide any personal information that you would like to begin with.
    Affiliation
    Specify your current position and responsibilities.
    Research activities
    ...


    >>> user.printCssQuery('.warning', strip=True)
    <p>Below you see a template that you can freely edit.
    Note that once your press "Save", it will become publicly
    available in your profile page.</p>



    >>> user.getControl('Edit your information').value = "Some <strong>cool</strong> information!"
    >>> user.getControl('Save').click()

General Information should be created and we should see flash message.

    >>> user.printCssQuery('.flash-message-content', strip=True)
    <span>Your information was updated.</span>
    <span>At the moment you are not confirmed as teacher. Our administrators have been notified and will verify you shortly.</span>

Now let's go to Public profile and look at information tab. Here should be our information.

    >>> user.click('Public profile')
    >>> user.click('General')
    >>> user.printCssQuery('#teacher-information')
    <div id="teacher-information" class="wiki-page">
         Some <strong>cool</strong> information!
    </div>

Regression test: saving in profile settings form does not reset
teacher's information:

    >>> user.click('Edit profile')
    >>> user.click('Save')
    >>> user.click('Public profile')
    >>> user.click('General')
    >>> user.printCssQuery('#teacher-information')
    <div id="teacher-information" class="wiki-page">
         Some <strong>cool</strong> information!
    </div>


After user is verified as a teacher, he still can edit his information
in settings page:

    >>> admin = Browser.logIn()
    >>> admin.open('http://localhost/admin')
    >>> admin.click('Teachers')
    >>> admin.click('Confirm')

    >>> user.click('Edit profile')
    >>> user.click('General Information')
    >>> user.getControl('Edit your information').value
    'Some <strong>cool</strong> information!'
    >>> user.getControl('Edit your information').value = 'Some <strong>very cool</strong> information!'
    >>> user.getControl('Save').click()
    >>> user.printCssQuery('.flash-message-content', strip=True)
    <span>Your information was updated.</span>
    >>> user.click('Public profile')
    >>> user.click('General')
    >>> user.printCssQuery('#teacher-information')
    <div id="teacher-information" class="wiki-page">
         Some <strong>very cool</strong> information!
    </div>

If teacher removes his information page by deleting it, he is again presented
with a template:

    >>> user.click('Edit profile')
    >>> user.click('General Information')
    >>> user.getControl('Edit your information').value = ''
    >>> user.click('Save')

    >>> print user.getControl('Edit your information').value
    Provide any personal information that you would like to begin with.
    Affiliation
    Specify your current position and responsibilities.
    Research activities
    ...

    >>> user.printCssQuery('.warning', strip=True)
    <p>Below you see a template that you can freely edit.
    Note that once your press "Save", it will become publicly
    available in your profile page.</p>

Mail queue is irrelevant for this test:

    >>> mail_queue[:] = []


Test teacher's publication page functionality
=============================================

Teacher has a separate page where he can list his publications. This
functionality is very similar to information page and this test will
overview main features.

Teacher can enter his publications freeform by accessing "Publications" tab
in his profile settings:

    >>> user.click('Edit profile')
    >>> user.click('Publications')
    >>> user.url
    'http://localhost/profile/edit/publications'

For the first time text area contains a template that teacher can edit.
It also displays a related warning message:

    >>> print user.getControl('List your publications').value
    List your publications that you consider most important, starting with most recent.
    ...

    >>> user.printCssQuery('.warning', strip=True)
    <p>Below you see a template that you can freely edit.
    Note that once your press "Save", it will become publicly
    available in your profile page.</p>

Let's try editing publications. Teacher cat enter rich text, using WYSIWYG
editor:

    >>> user.getControl('List your publications').value = "<a>Here</a> are my publications."
    >>> user.getControl('Save').click()

Publication page is created and a flash message is displayed to the teacher:

    >>> user.printCssQuery('.flash-message-content', strip=True)
    <span>Your publication page was updated.</span>

Now let's go to Public profile and look at publication tab. We should see
the text that teacher has just entered:

    >>> user.click('Public profile')
    >>> user.click('Publications')
    >>> user.printCssQuery('#teacher-publications', strip=True)
    <div>
        <a>Here</a> are my publications.
    </div>

If teacher removes his publication page by deleting it, he is again presented
with a template:

    >>> user.click('Edit profile')
    >>> user.click('Publications')
    >>> user.getControl('List your publications').value = ''
    >>> user.click('Save')

    >>> print user.getControl('List your publications').value
    List your publications that you consider most important, starting with most recent.
    ...

    >>> user.printCssQuery('.warning', strip=True)
    <p>Below you see a template that you can freely edit.
    Note that once your press "Save", it will become publicly
    available in your profile page.</p>


Teacher public page details
===========================

Here we will test some of the details of teacher's public profile page.
(Public profile page refers to what is shown to a user that is not logged in.)

On the public profile page, teacher's location links to external web pages,
instead of Ututi network pages:

    >>> anonymous = Browser()
    >>> anonymous.click('More')
    >>> anonymous.click('U-niversity')
    >>> anonymous.click('Teachers')
    >>> anonymous.click('User')
    >>> anonymous.printCssQuery('.location-links', strip=True)
    <ul> <li>U-niversity</li> </ul>

Now there are no links, because U-niversity has no site url set. Let's
see what happens if we set one:

    >>> admin = Browser.logIn()
    >>> admin.open('http://localhost/structure/edit/1')
    >>> admin.printCssQuery('h1')
    <h1>U-niversity</h1>
    >>> admin.getControl('Website').value = 'http://university.com'
    >>> admin.click('Save')

    >>> anonymous.reload()
    >>> anonymous.printCssQuery('.location-links', strip=True)
    <ul> <li> <a>U-niversity</a> </li> </ul>
    >>> anonymous.getLink('U-niversity')
    <Link text='U-niversity' url='http://university.com'>
