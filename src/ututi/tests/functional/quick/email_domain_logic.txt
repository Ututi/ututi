Email domain logic
==================

    >>> from ututi.lib.mailer import mail_queue
    >>> from ututi.lib.helpers import get_urls


Email domain administration
============================

Ututi keeps database of email domains. Some of them are considered public,
and other belong to universtities. Domain database can be accessed and
edited via admin's dashboard:

    >>> admin = Browser.logIn()
    >>> admin.open('http://localhost/admin')
    >>> admin.click('Email domains')

Currently there are no domains:

    >>> admin.printCssQuery('.domain-name, .domain-location')

Let's add a few public domains:

    >>> form = admin.getForm('email_domain_form')
    >>> form.getControl('domains').value = 'example.com, example3.com\n\nexample2.com'
    >>> form.getControl('Add').click()

We will see domains listed alphabetically:

    >>> admin.printCssQuery('.domain-name, .domain-location', strip=True)
    <span>example2.com</span> <span>(Public)</span>
    <span>example3.com</span> <span>(Public)</span>
    <span>example.com</span> <span>(Public)</span>

Admin can delete domain by clicking "Delete" link next to it.
Let's "example3.com":

    >>> admin.getLink('Delete', index=1).click()
    >>> admin.printCssQuery('.domain-name, .domain-location', strip=True)
    <span>example2.com</span> <span>(Public)</span>
    <span>example.com</span> <span>(Public)</span>

Admin can add non public domains by selecting university from dropdown list:

    >>> form = admin.getForm('email_domain_form')

# XXX display values matches both university and its faculties, so I am using value

    >>> form.getControl('University (or public)').value = ['1']
    >>> form.getControl('domains').value = 'uni.ututi.com'
    >>> form.getControl('Add').click()

    >>> admin.printCssQuery('.domain-name, .domain-location', strip=True)
    <span>example2.com</span> <span>(Public)</span>
    <span>example.com</span> <span>(Public)</span>
    <span>uni.ututi.com</span> <span> <span> <a>U-niversity</a> </span> </span>


University domain registration
==============================

When user registers new university, he selects email domain policy
for the university and enters allowed domains.

In order to test this, we'll go through the registration process:

    >>> user = Browser()
    >>> user.open('http://localhost/')
    >>> form = user.getForm('sign-up-form')
    >>> form.getControl(name='name').value = 'User'
    >>> form.getControl(name='email').value = 'user@vu.lt'
    >>> form.getControl(name='accept_terms').value = '1'
    >>> form.getControl(name='location_id').displayValue = ['--- Create new university ---']
    >>> form.getControl(name='person').value = 'student'
    >>> form.getControl('Create an account').click()
    >>> msg = mail_queue.pop()
    >>> urls = get_urls(msg.payload())
    >>> user.open(urls[0])

    >>> user.url
    'http://localhost/registration/.../university_create'

User enters university data in the first step:

    >>> from ututi.tests.functional import make_file
    >>> form = user.getForm('university-create-form')
    >>> form.getControl('Full University title:').value = 'Vilnius University'
    >>> form.getControl('Country:').displayValue = ['Lithuania']
    >>> form.getControl('University website:').value = 'www.vu.lt'
    >>> form.getControl('University logo:').add_file(*make_file('test_logo.png'))

We will specify restrict domain policy and enter few email domains.
Note that domain of user email (@vu.lt) is automatically posted:

    >>> form.getControl(name='allowed_domains-0').value
    'vu.lt'

Email domains are validated:

    >>> form.getControl(name='member_policy').value = ['RESTRICT_EMAIL']
    >>> form.getControl(name='allowed_domains-1').value = 'not a domain'
    >>> form.getControl(name='allowed_domains-2').value = '@domain.not'
    >>> user.getControl("Next").click()
    >>> user.url
    'http://localhost/registration/.../university_create'
    >>> user.printCssQuery('.error-message', strip=True)
    <span>not a domain is not a valid email domain.</span>
    <span>@domain.not is not a valid email domain.</span>

Furthermore, Ututi will not allow registering email domains that are already registered:

    >>> form = user.getForm('university-create-form')
    >>> form.getControl(name='member_policy').value = ['RESTRICT_EMAIL']
    >>> form.getControl(name='allowed_domains-1').value = 'example.com'
    >>> form.getControl(name='allowed_domains-2').value = 'uni.ututi.com'
    >>> user.getControl("Next").click()
    >>> user.url
    'http://localhost/registration/.../university_create'
    >>> user.printCssQuery('.error-message', strip=True)
    <span>Please select logo.</span>
    <span>Email domain example.com is not available.</span>
    <span>Email domain uni.ututi.com is not available.</span>

Let's replace them with unique domains. We have to reupload photo as well, because
the form did not validate:

    >>> form = user.getForm('university-create-form')
    >>> form.getControl(name='allowed_domains-1').value = 'mif.vu.lt'
    >>> form.getControl(name='allowed_domains-2').value = 'stud.mif.vu.lt'
    >>> form.getControl('University logo:').add_file(*make_file('test_logo.png'))
    >>> user.getControl("Next").click()

We'll just skim through next steps:

    >>> form = user.getForm('personal-info-form')
    >>> form.getControl('Full name:').value = 'User'
    >>> form.getControl('Password:').value = 'password'
    >>> user.click('Next')
    >>> user.click('Skip')
    >>> user.click('Finish')

After university is created, admin can see registered email domains:

    >>> admin.open(admin.url)
    >>> admin.printCssQuery('.domain-name, .domain-location', strip=True)
    <span>example2.com</span> <span>(Public)</span>
    <span>example.com</span> <span>(Public)</span>
    <span>uni.ututi.com</span> <span> <span> <a>U-niversity</a> </span> </span>
    <span>mif.vu.lt</span> <span> <span> <a>Vilnius University</a> </span> </span>
    <span>stud.mif.vu.lt</span> <span> <span> <a>Vilnius University</a> </span> </span>
    <span>vu.lt</span> <span> <span> <a>Vilnius University</a> </span> </span>


User registration
=================

User can register to Ututi in several ways: signing up from the frontpage,
signing up from university pages or invited by other users.

In either case, registration location is set before email confirmation or any
other step.

It may be the case that no location is set for registration. The only possible
registration flow in that case is to create new university.


Frontpage "Sign up"
===================

There are three possibilities when user signs up from the frontpage:

1. User enters email that has not been registered in Ututi before. This brings
him to registration flow where user creates university. This is covered above.

2. User enters email that belongs to some university. Then this location is set to
registration without asking user to confirm.

    >>> anonymous = Browser()
    >>> form = anonymous.getForm('sign-up-form')
    >>> form.getControl(name='name').value = 'MIFuser'
    >>> form.getControl(name='email').value = 'user@mif.vu.lt'
    >>> form.getControl(name='accept_terms').value = '1'
    >>> form.getControl(name='location_id').displayValue = ['Vilnius University']
    >>> form.getControl(name='person').value = 'student'
    >>> form.getControl('Create an account').click()
    >>> msg = mail_queue.pop()
    >>> urls = get_urls(msg.payload())
    >>> urls[0]
    'http://localhost/registration/.../confirm'

    >>> anonymous.open(urls[0])
    >>> anonymous.url
    'http://localhost/registration/.../university'
    >>> anonymous.printCssQuery('h1.page-title', strip=True)
    <h1>University information</h1>
    >>> anonymous.printCssQuery('.notification', strip=True)
    <span> You are registering to <strong>Vilnius University</strong> network. </span>

3. User enters email that is registered as public. Then it will not validate and a helpful
error message will be displayed.

    >>> anonymous = Browser()
    >>> form = anonymous.getForm('sign-up-form')
    >>> form.getControl(name='name').value = 'Example'
    >>> form.getControl(name='email').value = 'user@example.com'
    >>> form.getControl(name='accept_terms').value = '1'
    >>> form.getControl(name='location_id').displayValue = ['Vilnius University']
    >>> form.getControl(name='person').value = 'student'
    >>> form.getControl('Create an account').click()
    >>> anonymous.printCssQuery('#sign-up-form .error-container .error-message', strip=True)
    <span>Please use your university email or <a>choose university from the list</a>.</span>


Registration from university pages
==================================

User may press "I study here" button from university page. User needs to enter
his email and his email is validated against university email policy.

    >>> anonymous.click('More universities >>')
    >>> anonymous.click('Vilnius University')
    >>> form = anonymous.getForm('sign-up-form')
    >>> form.getControl(name='email').value = 'user@example.com'
    >>> form.getControl('Create an account').click()
    >>> anonymous.url
    'http://localhost/school/vu.lt/register'
    >>> anonymous.printCssQuery('.error-message', strip=True)
    <span>You have to use university email address to register at this university.</span>

Existing emails are also not allowed:

    >>> anonymous.getControl(name='email').value = 'user@vu.lt'
    >>> anonymous.getControl('Sign Up').click()
    >>> anonymous.printCssQuery('.error-message', strip=True)
    <span>user@vu.lt is already registered in Vilnius University network.</span>

user@mif.vu.lt works, because it conforms to university policy and is not taken:

    >>> anonymous.getControl(name='email').value = 'user@mif.vu.lt'
    >>> anonymous.getControl('Sign Up').click()
    >>> anonymous.printCssQuery('h1.page-title', strip=True)
    <h1>Email approval</h1>

U-niversity has public member policy, therefore any valid email will validate:

    >>> anonymous.open('http://localhost/school/uni/register')
    >>> anonymous.getControl(name='email').value = 'admin@uni.ututi.com'
    >>> anonymous.getControl('Sign Up').click()
    >>> anonymous.printCssQuery('.error-message', strip=True)
    <span>admin@uni.ututi.com is already registered in U-niversity network.</span>
    >>> anonymous.getControl('Enter your email').value = 'user@example.com'
    >>> anonymous.getControl('Sign Up').click()
    >>> anonymous.printCssQuery('h1.page-title', strip=True)
    <h1>Email approval</h1>
    >>> anonymous.open('http://localhost/school/uni/register')
    >>> anonymous.getControl(name='email').value = 'user@mif.vu.lt'
    >>> anonymous.getControl('Sign Up').click()
    >>> anonymous.printCssQuery('h1.page-title', strip=True)
    <h1>Email approval</h1>

    >>> mail_queue[:] = []


Login
=====

User can login from the login page. He gets there by clicking "Login" link
in header:

    >>> anonymous.click('Login')
    >>> anonymous.url
    'http://localhost/login'

User that has registered can login here:

    >>> form = anonymous.getForm('login-form')
    >>> form.getControl('Email address').value = 'user@vu.lt'
    >>> form.getControl('Password').value = 'password'
    >>> form.getControl('Login').click()
    >>> anonymous.url
    'http://localhost/home/start'

If user has registered to several universities using same username,
the login page will ask him to select the network he wants to sign in.

In order to test this, we will register user@vu.lt to U-niversity.

    >>> user = Browser()
    >>> user.open('http://localhost/school/uni')
    >>> form = user.getForm('sign-up-form')
    >>> form.getControl(name='email').value = 'user@vu.lt'
    >>> form.getControl('Create an account').click()
    >>> msg = mail_queue.pop()
    >>> urls = get_urls(msg.payload())
    >>> user.open(urls[0])
    >>> user.click('Next')
    >>> user.getControl('Full name:').value = 'User'
    >>> user.getControl('Password:').value = 'anotherpassword'
    >>> user.click('Next')
    >>> user.click('Skip')
    >>> user.click('Finish')
    >>> user.click('Logout')

Now, we'll demonstrate the behavior by first logging in to Vilnius University
and then to U-niversity.

    >>> user.click('Login')
    >>> form = user.getForm('login-form')
    >>> form.getControl('Email address').value = 'user@vu.lt'
    >>> form.getControl('Password').value = 'password'
    >>> form.getControl('Login').click()
    >>> user.printCssQuery('.error-message', strip=True)
    <span>Please select your network.</span>
    >>> form = user.getForm('login-form')
    >>> form.getControl('Password').value = 'password'
    >>> form.getControl('Select network').displayValue = ['Vilnius University']
    >>> form.getControl('Login').click()
    >>> user.url
    'http://localhost/home/start'
    >>> user.click('University')
    >>> user.url
    'http://localhost/school/vu.lt/feed'
    >>> user.click('Logout')

    >>> user.click('Login')
    >>> form = user.getForm('login-form')
    >>> form.getControl('Email address').value = 'user@vu.lt'
    >>> form.getControl('Password').value = 'anotherpassword'
    >>> form.getControl('Login').click()
    >>> user.printCssQuery('.error-message', strip=True)
    <span>Please select your network.</span>
    >>> form = user.getForm('login-form')
    >>> form.getControl('Password').value = 'anotherpassword'
    >>> form.getControl('Select network').displayValue = ['U-niversity']
    >>> form.getControl('Login').click()
    >>> user.url
    'http://localhost/home/start'
    >>> user.click('University')
    >>> user.url
    'http://localhost/school/uni/feed'
    >>> user.click('Logout')

Note that user was asked to specify his location even we could have identified
him by his password. If it's a bug or a feature, we left the reader to decide!
