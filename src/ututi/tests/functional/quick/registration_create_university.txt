User registration flow including University create step
=======================================================


A new Ututi user can start his registration on the frontpage,
by entering his email and clicking 'Sign Up':

    >>> browser = Browser()
    >>> browser.open('http://localhost/')
    >>> form = browser.getForm('sign-up-form')
    >>> form.getControl(name='email').value = 'us er@example.com'
    >>> form.getControl('Sign Up').click()

Email is not valid, so it is rejected:

    >>> browser.url
    'http://localhost/register'

    >>> browser.printCssQuery('#sign-up-form .error-message', strip=True)
    <span>The username portion of the email address is invalid (the portion before the @: us er)</span>

User sees the URL and some other time tries to reload it. If email
is not posted, this action redirects to the homepage:

    >>> browser.open('http://localhost/register')
    >>> browser.url
    'http://localhost/'

This time user enters his email correctly and is redirected to email
confirmation page:

    >>> form = browser.getForm('sign-up-form')
    >>> form.getControl(name='email').value = 'user@example.com'
    >>> form.getControl('Sign Up').click()

TODO: what if user types in an existing email address?

A confirmation code is sent to user's email, and the page states so:

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Email approval</h1>

    >>> browser.printCssQuery('#confirmation-instruction', strip=True)
    <div>
        <p>We need to approve that you are the owner of this email address.
        You have received a confirmation code to user@example.com.</p>
        <p>Did not get the confirmation code? Press "Send again" button.</p>
    </div>

User can click the "Send again" button, and the code is sent again:

    >>> browser.getControl("Send again").click()
    >>> browser.url
    'http://localhost/registration/resend'

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Email approval</h1>

A flash message is displayed:

    >>> browser.printQuery("//div[@class='flash-message']//text()")
    Your confirmation code was resent.

However, if user tries to sign up from university page, a new registration
will be created (with assigned university):

    >>> browser.open('http://localhost/school/uni/register')
    >>> browser.getControl('Enter your email here:').value = 'user@example.com'
    >>> browser.getControl('Register').click()
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Email approval</h1>

Let's check the emails:

    >>> from ututi.lib.mailer import mail_queue

    >>> len(mail_queue)
    3

    >>> msg1, msg2, msg3 = mail_queue
    >>> msg1.payload() == msg2.payload()
    True
    >>> msg2.payload() != msg3.payload()
    True

    >>> print msg1.payload()
    We have received a request to confirm the ownership of this email on the Ututi system.
    If this email belongs to you, confirm it by clicking on this link:
    http://localhost/registration/.../confirm
    Ututi team

    >>> msg1.recipients
    ['user@example.com']

    >>> mail_queue[:] = []

When user clicks on confirmation link, he starts his registration process:

    >>> from ututi.lib.helpers import get_urls
    >>> urls = get_urls(msg1.payload())
    >>> registration_url = urls[0]

    >>> browser.open(registration_url)

The first registration step is "University information" step, where user fills
out University information he is about to create:

    >>> browser.url
    'http://localhost/registration/.../university_create'

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>University information</h1>

University website URL is filled with domain name by default:

    >>> browser.getControl(name='site_url').value
    'http://example.com'

    >>> browser.getControl(name='site_url').value = ''

University title, country, site url, logo and member policy are required fields.

    >>> browser.getControl("Next").click()
    >>> browser.printCssQuery('.error-message', strip=True)
    <span>Please enter university title.</span>
    <span>Please select country.</span>
    <span>Please enter university web site.</span>
    <span>Please select logo.</span>
    <span>Please specify member policy.</span>

    >>> from ututi.tests.functional import make_file
    >>> form = browser.getForm('university-create-form')
    >>> form.getControl('Full University title:').value = 'Example University'
    >>> form.getControl('Country:').displayValue = ['Lithuania']
    >>> form.getControl('University website:').value = 'www.example.com'
    >>> form.getControl('University logo:').add_file(*make_file('test_logo.png'))
    >>> form.getControl(name='member_policy').value = ['RESTRICT_EMAIL']

The "Next" takes user to "Personal information" step:

    >>> browser.getControl("Next").click()
    >>> browser.printCssQuery('.error-message', strip=True)
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Personal information</h1>

Regression test: no error messages are displayed when user enters this page:

    >>> browser.printCssQuery('.error-message', strip=True)

Before going next, user has to fill in his full name and password:

    >>> browser.getControl("Next").click()
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Personal information</h1>

    >>> browser.printCssQuery('.error-message', strip=True)
    <span>Please enter your full name.</span>
    <span>Please enter your password.</span>

    >>> form = browser.getForm('personal-info-form')
    >>> form.getControl('Full name:').value = 'User'
    >>> form.getControl('Password:').value = 'password'
    >>> form.getControl('Next').click()

This takes user to the third step: "Add your photo":

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Add your photo</h1>

Adding photo is mandatory:

    >>> browser.getLink('Skip').click()
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Invite friends</h1>

However, the 'Next' button raises an error:

    >>> browser.goBack()

    >>> browser.getControl('Next').click()
    >>> browser.printCssQuery('.error-message', strip=True)
    <span>Please select your photo.</span>

Let's upload the photo:

    >>> form = browser.getForm('add-photo-form')
    >>> form.getControl(name='photo').add_file(*make_file('test_logo.png'))
    >>> browser.getControl('Next').click()

This automatically takes user to the next step:

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Invite friends</h1>

In add photo form: if user has already set his logo,
'Next' button does not raise error anymore:

    >>> browser.goBack()

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Add your photo</h1>

    >>> browser.getControl('Next').click()
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Invite friends</h1>

User can invite users entering emails freeform. All emails are validated first:

    >>> form = browser.getForm('invite-friends-form')
    >>> form.getControl(name='emails').value = 'one, tw@o three\nf@o@ur'
    >>> browser.getControl('Finish').click()

    >>> browser.printCssQuery('.error-message', strip=True)
    <span>An email address must contain a single @</span>
    <span>The domain portion of the email address is invalid (the portion after the @: o)</span>
    <span>An email address must contain a single @</span>
    <span>The domain portion of the email address is invalid (the portion after the @: o@ur)</span>

If correct email addresses are submitted, user is taken to the "Welcome" page,
and invitation are sent:

    >>> form = browser.getForm('invite-friends-form')
    >>> form.getControl(name='emails').value = 'one@example.com, two@example.com three@example.com\nfour@example.com'
    >>> browser.getControl('Finish').click()

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Welcome to Ututi</h1>

    >>> len(mail_queue)
    4

    >>> [msg.recipients for msg in mail_queue]
    [['one@example.com'], ['two@example.com'], ['three@example.com'], ['four@example.com']]

    >>> mail_queue[:] = []

User can not go back to registration, it is invalidated:

    >>> browser.open(registration_url)
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found


A new Ututi user will can start new registration from frontpage,
ant type existing University title or website URL:

    >>> mail_queue[:] = []
    >>> browser = Browser()
    >>> browser.open('http://localhost/')
    >>> form = browser.getForm('sign-up-form')
    >>> form.getControl(name='email').value = 'user@u2ti.com'
    >>> form.getControl('Sign Up').click()

Let's check the emails:

    >>> from ututi.lib.mailer import mail_queue

    >>> len(mail_queue)
    1

    >>> msg1 = mail_queue.pop()

    >>> print msg1.payload()
    We have received a request to confirm the ownership of this email on the Ututi system.
    If this email belongs to you, confirm it by clicking on this link:
    http://localhost/registration/.../confirm
    Ututi team

    >>> msg1.recipients
    ['user@u2ti.com']

    >>> mail_queue[:] = []

When user clicks on confirmation link, he starts his registration process:

    >>> from ututi.lib.helpers import get_urls
    >>> urls = get_urls(msg1.payload())
    >>> registration_url = urls[0]

    >>> browser.open(registration_url)

The first registration step is "University information" step, where user fills
out University information he is about to create:

    >>> browser.url
    'http://localhost/registration/.../university_create'

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>University information</h1>

Fill University information with existing university title:

    >>> browser.getControl(name='site_url').value
    'http://u2ti.com'

    >>> from ututi.tests.functional import make_file
    >>> form = browser.getForm('university-create-form')
    >>> form.getControl('Full University title:').value = 'Example University'
    >>> form.getControl('Country:').displayValue = ['Lithuania']
    >>> form.getControl('University website:').value = 'www.u2ti.com'
    >>> form.getControl('University logo:').add_file(*make_file('test_logo.png'))
    >>> form.getControl(name='member_policy').value = ['RESTRICT_EMAIL']

The "Next" takes user to "Personal information" step:

    >>> browser.getControl("Next").click()
    >>> browser.printCssQuery('.error-message', strip=True)
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Personal information</h1>

Before going next, user has to fill in his full name and password:

    >>> form = browser.getForm('personal-info-form')
    >>> form.getControl('Full name:').value = 'User'
    >>> form.getControl('Password:').value = 'password'
    >>> form.getControl('Next').click()

This takes user to the third step: "Add your photo". Adding photo is
not mandatory:

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Add your photo</h1>

    >>> browser.getLink('Skip').click()
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Invite friends</h1>

We don't want to invite any users:

    >>> browser.getControl('Finish').click()
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Welcome to Ututi</h1>

Let's look to universities list. We must see only one 'Example University':

    >>> browser.open('http://localhost/profile/browse')
    >>> browser.printCssQuery('#university-list .title', strip=True)
    <div>
      <a>Example University</a>
    </div>
    <div>
      <a>U-niversity</a>
    </div>
