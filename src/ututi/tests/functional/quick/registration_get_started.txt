User registration flow
======================


A new Ututi user can start his registration on university page,
by clicking 'I study here' button:

    >>> browser = Browser()
    >>> browser.open('http://localhost/school/uni')

    >>> browser.getControl('I study here').click()

User has to type in a valid email address to initiate registration:

    >>> browser.getControl('Enter your email').value = 'what ever'
    >>> browser.getControl('Sign Up').click()
    >>> browser.url
    'http://localhost/school/uni/register'
    >>> browser.printCssQuery('.error-message', strip=True)
    <span>An email address must contain a single @</span>
    >>> browser.getControl('Enter your email').value = 'what ever@example.com'
    >>> browser.getControl('Sign Up').click()
    >>> browser.printCssQuery('.error-message', strip=True)
    <span>The username portion of the email address is invalid (the portion before the @: what ever)</span>

If user types in an existing email address, an error message will be displayed:

    >>> browser.getControl('Enter your email').value = 'admin@uni.ututi.com'
    >>> browser.getControl('Sign Up').click()
    >>> browser.printCssQuery('.error-message', strip=True)
    <span>admin@uni.ututi.com is already registered in U-niversity network.</span>

Regression test: non-ascii characters in email are not valid in Ututi:

    >>> browser.getControl('Enter your email').value = u'\u016bser@example.com'.encode('utf-8')
    >>> browser.getControl('Sign Up').click()
    >>> browser.printCssQuery('.error-message', strip=True)
    <span>Email address cannot contain unicode characters</span>

User come back to registration view ant types new email:

    >>> browser.getControl('Enter your email').value = 'user@example.com'
    >>> browser.getControl('Sign Up').click()

A confirmation code is sent to user's email, and the page states so:

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Email approval</h1>

    >>> browser.printCssQuery('#confirmation-instruction', strip=True)
    <div>
        <p>We need to approve that you are the owner of this email address.
        You have received a confirmation code to user@example.com.</p>
        <p>Did not get the confirmation code? Press "Send again" button.</p>
    </div>

User can click the "Send again" button, and the code is sent again:

    >>> browser.getControl("Send again").click()
    >>> browser.url
    'http://localhost/registration/resend'

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Email approval</h1>

A flash message is displayed:

    >>> browser.printQuery("//div[@class='flash-message']//text()")
    Your confirmation code was resent.

The same thing happens if the user simply restarts the registration process:

    >>> browser.open('http://localhost/school/uni/register')
    >>> browser.getControl('Enter your email').value = 'user@example.com'
    >>> browser.getControl('Sign Up').click()
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Email approval</h1>

But no flash message here:

    >>> browser.printQuery("//div[@class='flash-message']//text()")

Let's check the emails:

    >>> from ututi.lib.mailer import mail_queue

    >>> len(mail_queue)
    3

    >>> msg1, msg2, msg3 = mail_queue
    >>> msg1.payload() == msg2.payload() == msg3.payload()
    True

    >>> print msg1.payload()
    We have received a request to confirm the ownership of this email on the Ututi system.
    If this email belongs to you, confirm it by clicking on this link:
    http://localhost/registration/.../confirm
    Ututi team

    >>> msg1.recipients
    ['user@example.com']

    >>> mail_queue[:] = []

When user clicks on confirmation link, he starts his registration process:

    >>> from ututi.lib.helpers import get_urls
    >>> urls = get_urls(msg1.payload())
    >>> registration_url = urls[0]
    >>> browser.open(registration_url)

The first registration step is "University information" step:

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>University information</h1>

It displays some people from this university:

    >>> browser.printCssQuery('#people-box .name', strip=True)
    <div> <a>Administrator of the university</a> </div>

"Contact us" link brings user to Ututi contact page:

    >>> browser.getLink(id='contact-link').click()
    >>> browser.url
    'http://localhost/contacts'
    >>> browser.goBack()

The "Next" takes user to "Personal information" step:

    >>> browser.getControl("Next").click()
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Personal information</h1>

Regression test: no error messages are displayed when user enters this page:

    >>> browser.printCssQuery('.error-message', strip=True)

Before going next, user has to fill in his full name and password:

    >>> browser.getControl("Next").click()
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Personal information</h1>

    >>> browser.printCssQuery('.error-message', strip=True)
    <span>Please enter your full name.</span>
    <span>Please enter your password.</span>

    >>> form = browser.getForm('personal-info-form')
    >>> form.getControl('Full name:').value = 'User'
    >>> form.getControl('Password:').value = 'password'
    >>> form.getControl('Next').click()

This takes user to the third step: "Add your photo":

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Add your photo</h1>

Adding photo is mandatory:

    >>> browser.getLink('Skip').click()
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Invite friends</h1>

However, the 'Next' button raises an error:

    >>> browser.goBack()

    >>> browser.getControl('Next').click()
    >>> browser.printCssQuery('.error-message', strip=True)
    <span>Please select your photo.</span>

Let's upload the photo:

    >>> from ututi.tests.functional import make_file
    >>> form = browser.getForm('add-photo-form')
    >>> form.getControl(name='photo').add_file(*make_file('test_logo.png'))
    >>> browser.getControl('Next').click()

This automatically takes user to the next step:

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Invite friends</h1>

In add photo form: if user has already set his logo,
'Next' button does not raise error anymore:

    >>> browser.goBack()

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Add your photo</h1>

    >>> browser.getControl('Next').click()
    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Invite friends</h1>

User can invite users entering emails freeform or using Facebook.
Let's visit facebook invitation page first:

    >>> browser.getLink(id='facebook-button').click()
    >>> browser.printCssQuery('.page-title', strip=True)
    <h1>Invite friends</h1>

Now let's go back and use email form to invite friends. All emails
are validated first:

    >>> browser.goBack()
    >>> form = browser.getForm('email-invitation-form')
    >>> form.getControl(name='emails').value = 'one, tw@o three\nf@o@ur'
    >>> browser.getControl('Finish').click()

    >>> browser.printCssQuery('.error-message', strip=True)
    <span>An email address must contain a single @</span>
    <span>The domain portion of the email address is invalid (the portion after the @: o)</span>
    <span>An email address must contain a single @</span>
    <span>The domain portion of the email address is invalid (the portion after the @: o@ur)</span>

If correct email addresses are submitted, user is taken to the "Welcome" page,
and invitation are sent:

    >>> form = browser.getForm('email-invitation-form')
    >>> form.getControl(name='emails').value = 'one@example.com, two@example.com three@example.com\nfour@example.com'
    >>> browser.getControl('Finish').click()

    >>> browser.printCssQuery('h1.page-title', strip=True)
    <h1>Welcome to Ututi</h1>

    >>> len(mail_queue)
    4

    >>> [msg.recipients for msg in mail_queue]
    [['one@example.com'], ['two@example.com'], ['three@example.com'], ['four@example.com']]

    >>> mail_queue[:] = []

User can not go back to registration, it is invalidated:

    >>> browser.open(registration_url)
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found


User's get started functionality
================================

To newly registered user Ututi shows a "Get started" home page.

    >>> user = Browser.logIn('user@example.com', 'password')
    >>> user.printCssQuery('.page-title', strip=True)
    <h1>Get started</h1>

On the right hand menu there is also a "Get started" menu item:

    >>> user.getLink('Get started')
    <Link text='Get started' url='http://localhost/home/start'>

User sees these options:

    >>> user.printCssQuery('.step span.title', strip=True)
    <span>Invite your friends</span>
    <span>Join the group</span>
    <span>Choose your subjects</span>
    <span>Fill your profile information</span>

He has already invited friends during registration, so "Invite friends"
step is marked as complete:

    >>> user.printCssQuery('.step.complete span.title', strip=True)
    <span>Invite your friends</span>

Nevertheless he can still use the form to invite more friends:

    >>> form = user.getForm('invite-friends-form')
    >>> form.getControl(name='recipients').value = 'user@example.com, user1@example.com, invalid@example@com, user2@example.com'
    >>> form.getControl('Invite').click()

    >>> user.printCssQuery('.flash-message-content', strip=True)
    <span>Invalid email addresses: invalid@example@com</span>
    <span>These addresses are already registered in Ututi: user@example.com</span>
    <span>Invitations sent to user1@example.com, user2@example.com</span>

    >>> len(mail_queue)
    2
    >>> mail_queue[:] = []

Facebook button brings user to facebook invitation view:

    >>> user.getLink(id='facebook-button').click()
    >>> user.url
    'http://localhost/invite_friends'
    >>> user.goBack()

Group's section offers to create a group of browse groups catalog:

    >>> user.click('Or browse group catalog')
    >>> user.url
    'http://localhost/school/uni/groups'
    >>> user.goBack()

    >>> user.click('Create new group')
    >>> user.url
    'http://localhost/groups/create'

Let's create a group now:

    >>> user.getControl('Entrance year').displayValue = ['2011']
    >>> user.getControl('Title').value = 'My new group'
    >>> user.getControl('Email address').value = 'mygroup'
    >>> user.click('Continue')
    >>> user.click('Finish')

Now let's go home and see that this action is marked as complete:

    >>> user.click('Home')
    >>> user.printCssQuery('.step.complete span.title', strip=True)
    <span>Invite your friends</span>
    <span>Join the group</span>

Subject section allows to search subjects of the university, or create it:

    >>> form = user.getForm('subject-search-form')
    >>> form.getControl(name='text').value = 'something'
    >>> form.getControl('Search').click()
    >>> user.url
    'http://localhost/school/uni/subjects'

TODO: we should check if it ever finds something. But this setup has no
subjects.

    >>> user.click('Home')
    >>> user.click('Or create new subject')
    >>> user.url
    'http://localhost/subjects/add'
    >>> user.goBack()

The profile section asks user to fill in his profile information.
There is a button that brings user to his profile settings:

    >>> user.click('Edit profile')
    >>> user.url
    'http://localhost/profile/edit?'

We can fill in something:

    >>> user.getControl('About yourself').value = "I'm cool"
    >>> user.click('Save')

Now enough actions have been completed and user's home page has been
switched to news feed:

    >>> user.click('Home')
    >>> user.url
    'http://localhost/home/feed'

The "Get started" menu item is removed as well:

    >>> user.getLink('Get started')
    Traceback (most recent call last):
    ...
    LinkNotFoundError

He can, however, visit get started page if he really wants to:

    >>> user.open('http://localhost/home/start')

He will see, that three actions are now marked as complete:

    >>> user.printCssQuery('.step.complete span.title', strip=True)
    <span>Invite your friends</span>
    <span>Join the group</span>
    <span>Fill your profile information</span>

And if user downgrades to not having enough actions done (i.e. leaves all groups),
his homepage is again switched to the "Get started" page. (This is how current
implementation works, and maybe it would be better not to switch again.)
We will test this behavior by removing profile information:

    >>> user.click('Settings')
    >>> user.getControl('About yourself').value = ''
    >>> user.click('Save')
    >>> user.click('Home')
    >>> user.url
    'http://localhost/home/start'

    >>> user.printCssQuery('.step.complete span.title', strip=True)
    <span>Invite your friends</span>
    <span>Join the group</span>

"Get started" menu item is also available again:

    >>> user.getLink('Get started')
    <Link text='Get started' url='http://localhost/home/start'>

If user has been using Ututi for more than two weeks, and has completed
at least two actions, then "Get started" page should also not be shown.
This is a bit hacky, but we will want to change user's registration time
to test that:

    >>> from datetime import timedelta
    >>> from ututi.model import meta
    >>> from ututi.model.users import User
    >>> u = User.get_global('user@example.com')
    >>> u.accepted_terms -= timedelta(weeks=2, seconds=1)
    >>> meta.Session.commit()

    >>> user.click('Home')
    >>> user.url
    'http://localhost/home/feed'

The "Get started" menu item is removed as well:

    >>> user.getLink('Get started')
    Traceback (most recent call last):
    ...
    LinkNotFoundError
