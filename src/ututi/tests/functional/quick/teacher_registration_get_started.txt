Test registration of teachers
=============================

    >>> from ututi.lib.mailer import mail_queue
    >>> from ututi.lib.helpers import get_urls

There are several cases, how user may become a teacher.

1. Anonymous teacher registration
=================================

User may press "I teach here" button in university page and have
the same registration flow as any other user. In the end, he
will be registered as teacher:

    >>> user = Browser()
    >>> user.open('http://localhost/school/uni')
    >>> user.click('I teach here')
    >>> user.getControl('Enter your academic email').value = 'user@example.com'
    >>> user.click('Sign Up')
    >>> msg = mail_queue.pop()
    >>> urls = get_urls(msg.payload())
    >>> user.open(urls[0])
    >>> user.click('Next')
    >>> user.getControl('Full name').value = 'User'
    >>> user.getControl('Password').value = 'password'
    >>> user.click('Next')
    >>> user.click('Skip')
    >>> user.click('Finish')

Here. Let's look at what teacher sees:

    >>> user.printCssQuery('h1.page-title', strip=True)
    <h1>Welcome to Ututi</h1>

    >>> user.printCssQuery(".flash-message-content", strip=True)
    <span>At the moment you are not confirmed as teacher. Our administrators have been notified and will verify you shortly.</span>

The team gets a notification about new teacher:

    >>> print mail_queue.pop().payload()
    A new teacher has registered:
    User (user@example.com)
    U-niversity
    Ututi

Let's register one more teacher that later will be denied:

    >>> notteacher = Browser()
    >>> notteacher.open('http://localhost/school/uni')
    >>> notteacher.click('I teach here')
    >>> notteacher.getControl('Enter your academic email').value = 'notteacher@example.com'
    >>> notteacher.click('Sign Up')
    >>> msg = mail_queue.pop()
    >>> urls = get_urls(msg.payload())
    >>> notteacher.open(urls[0])
    >>> notteacher.click('Next')
    >>> notteacher.getControl('Full name').value = 'Not a teacher'
    >>> notteacher.getControl('Password').value = 'password'
    >>> notteacher.click('Next')
    >>> notteacher.click('Skip')
    >>> notteacher.click('Finish')
    >>> print mail_queue.pop().payload()
    A new teacher has registered:
    Not a teacher (notteacher@example.com)
    U-niversity
    Ututi

The administrator should now see requests to confirm a teacher:

    >>> admin = Browser.logIn()
    >>> admin.open('http://localhost/admin')
    >>> admin.getLink('Teachers').click()
    >>> admin.printQuery("id('teacher_list')//td[@class='name']//text()")
    User
    Not a teacher

Let's confirm User:

    >>> admin.getControl('Confirm', index=0).click()
    >>> print mail_queue.pop().payload()
    User,
    Your request to join Ututi as a teacher has been confirmed!
    You may now visit your Ututi dashboard here: http://localhost/ .
    At Ututi you will be able to::
    - Create your own profile with all Your courses and materials.
    - Easily publish Your lecture notes so that Your students can find and access them.
    - Easily communicate with Your students.
    The Ututi team

    >>> admin.printQuery("id('teacher_list')//td[@class='name']//text()")
    Not a teacher

User now should see that he was confirmed:

    >>> user.open(user.url)
    >>> user.printQuery("//div[@class='flash-message']//span/text()")

Let's deny the other one:

    >>> admin.getControl('Deny', index=0).click()
    >>> print mail_queue.pop().payload()
    Not a teacher,
    Your request to join Ututi as a teacher has been rejected.
    If this was a misunderstanding, please contact us directly at: info@ututi.lt.
    The Ututi team

2. Existing user wants to become a teacher
==========================================

Existing users can be manually transformed into teachers.
When they press "I teach here", their request is registered
and email is sent to Ututi team.

Let's login as admin@uni.ututi.com (default user) to test that.

    >>> user = Browser.logIn()
    >>> user.click('University')
    >>> user.click('I teach here')
    >>> user.printQuery("//div[@class='flash-message']//span/text()")
    Thank You! Your request to become a teacher has been received.
    We will notify You once we grant You the rights of a teacher.

    >>> print mail_queue.pop().payload()
    A user wants to become a teacher:
    Administrator of the university (admin@uni.ututi.com)
    U-niversity
    http://localhost/admin/teachers?user_id=1
    Ututi

Admin can click the link from email above and confirm the teacher.
However, let's save it for later.

    >>> admin.open('http://localhost/admin/teachers?user_id=1')
    >>> admin.printQuery("id('teacher_list')//td[@class='name']//text()")
    Administrator of the university

3. Existing user wants to become a teacher, but is not logged in
================================================================

If user enters an existing email to teacher registration form,
he will be asked to log in, and then will be handled the same
way as any existing Ututi user (case above).

    >>> user = Browser()
    >>> user.open('http://localhost/school/uni')
    >>> user.click('I teach here')
    >>> user.getControl('Enter your academic email').value = 'admin@uni.ututi.com'
    >>> user.click('Sign Up')
    >>> user.url
    'http://localhost/login?came_from=%2Fschool%2Funi%2Fregister%2Fteacher%2Fexisting&email=admin%40uni.ututi.com'
    >>> user.getControl('Password').value = 'asdasd'
    >>> user.getControl('Login').click()
    >>> user.url
    'http://localhost/school/uni/feed'
    >>> user.printQuery("//div[@class='flash-message']//span/text()")
    Thank You! Your request to become a teacher has been received.
    We will notify You once we grant You the rights of a teacher.
    >>> print mail_queue.pop().payload()
    A user wants to become a teacher:
    Administrator of the university (admin@uni.ututi.com)
    U-niversity
    http://localhost/admin/teachers?user_id=1
    Ututi

Let's verify him this time:

    >>> admin.open('http://localhost/admin/teachers?user_id=1')
    >>> admin.printQuery("id('teacher_list')//td[@class='name']//text()")
    Administrator of the university
    >>> admin.click('Make a teacher')

    >>> print mail_queue.pop().payload()
    Administrator of the university,
    Your request to join Ututi as a teacher has been confirmed!
    You may now visit your Ututi dashboard here: http://localhost/ .
    At Ututi you will be able to::
    - Create your own profile with all Your courses and materials.
    - Easily publish Your lecture notes so that Your students can find and access them.
    - Easily communicate with Your students.
    The Ututi team

    >>> user.click('Home')

User has become a teacher. Hooray!

TODO for this test:
- user is not signed in, click "I study here" but is already a teacher
- email validation in teacher registration form
- user is not signed in, when redirected to login, enters a different email



Teacher's dashboard get started functionality
=============================================

We will use one of the registered teachers to show teacher's dashboard
page functionality.

    >>> user = Browser.logIn('user@example.com', 'password')
    >>> user.printCssQuery('.page-title', strip=True)
    <h1>Dashboard</h1>

User sees these recommended actions on his dashboard:

    >>> user.printCssQuery('.page-section > div.title', strip=True)
    <div>Fill your page</div>
    <div>Create your subjects</div>
    <div>Add your students' contacts</div>

Edit profile button brings user to his profile edit page (duh!):

    >>> user.getControl('Edit my page', index=0).click()
    >>> user.url
    'http://localhost/profile/edit?'

If user add some info, this action will change:

    >>> user.click('Contacts')
    >>> user.getControl('Address of your website').value = 'http://myblog.com'
    >>> user.click('Save')
    >>> user.click('Home')
    >>> user.printCssQuery('.page-section > div.title', strip=True)
    <div>
        My profile page
        <span>
        <form>
          <fieldset>
            <button>
              <span>edit my page</span>
            </button>
          </fieldset>
        </form>
      </span>
    </div>
    <div>Create your subjects</div>
    <div>Add your students' contacts</div>

Subject's section allows to lookup and create subjects. Let's
create a subject now:

    >>> form = user.getForm('subject-search-form')
    >>> form.getControl(name='title').value = 'Algorithms'
    >>> form.getControl('Create').click()
    >>> user.url
    'http://localhost/subjects/add_description'
    >>> user.getControl('Create').click()

Now this action has also will change:

    >>> user.click('Home')
    >>> user.printCssQuery('.page-section > div.title', strip=True)
    <div>
        My profile page
        <span>
        <form>
          <fieldset>
            <button>
              <span>edit my page</span>
            </button>
          </fieldset>
        </form>
      </span>
    </div>
    <div>
        My courses
        <span>
        <form>
          <fieldset>
            <button>
              <span>add courses</span>
            </button>
          </fieldset>
        </form>
      </span>
    </div>
    <div>Add your students' contacts</div>

Group's section offers to add student groups:

    >>> user.click('Add student group')
    >>> user.url
    'http://localhost/profile/add_student_group?'
    >>> user.goBack()

And if teacher downgrades some actions (i.e. removes all subjects), the
appropriate action will again appear on his dashboard. We will test this
behavior by removing profile information:

    >>> user.click('Edit profile')
    >>> user.click('Contacts')
    >>> user.getControl('Address of your website').value = ''
    >>> user.click('Save')
    >>> user.click('Home')
    >>> user.printCssQuery('.page-section > div.title', strip=True)
    <div>Fill your page</div>
    <div>
        My courses
        <span>
        <form>
          <fieldset>
            <button>
              <span>add courses</span>
            </button>
          </fieldset>
        </form>
      </span>
    </div>
    <div>Add your students' contacts</div>
