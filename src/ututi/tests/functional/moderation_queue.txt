Tests for group mailing list moderation queue
=============================================

The default setting allows only group members post emails to the
mailing list, so if someone sends an email to the mailing list while
not being on it, the email is just ignored:

    >>> browser = Browser.logIn('admin@uni.ututi.com', 'asdasd')
    >>> browser.getLink('Moderatoriai', url='/group/moderators').click()

Disable moderation first:

    >>> browser.getLink('Edit', url='group').click()
    >>> browser.getControl('Members only').click()
    >>> browser.getControl('Save').click()

    >>> from ututi.tests.functional import send_test_message
    >>> send_test_message('email_from_user2.txt', '33', to='moderators@groups.ututi.lt')
    >>> send_test_message('email_from_non_ututi.txt', '42', to='moderators@groups.ututi.lt', subject='Hello from varlius')

Now if we go to the group settings page and set it so it would allow
other people to post emails to our mailing list, a moderation queue
get's enabled and all the emails that are sent to the group from
non-group members will get posted into the queue.

First we go to the settings page and set the value:

    >>> browser.getLink('Edit', url='group').click()
    >>> browser.getControl('Everybody (moderated)').click()
    >>> browser.getControl('Save').click()

This time if we post the email, we will still not get it in our
mailing list:

    >>> send_test_message('email_from_user2.txt', '33', to='moderators@groups.ututi.lt')

No email messages will be sent to group members either:

    >>> from ututi.lib.mailer import mail_queue
    >>> len(mail_queue)
    0

But we will see it in the moderation queue.

    >>> browser.getLink('Moderation queue').click()
    >>> browser.printQuery("id('single-messages')//div[contains(@class, 'm-on')]//text()")
    Hello
    Hi, I am just writing to tell you how wonderful...

We can see the content of the message by clicking on it's title:

    >>> browser.getLink('Hello').click()
    >>> browser.printQuery("//div[@class='post-body']//text()")
    Hi, I am just writing to tell you how wonderful this system is.
    User2

Messages from non-ututi users are treated in a special way, as these
messages don't have an author:

    >>> send_test_message('email_from_non_ututi.txt', '42', to='moderators@groups.ututi.lt', subject='Hello from varlius')

Now we should see 2 messages in the list:

    >>> browser.getLink('Back to the moderation queue').click()
    >>> browser.printQuery("id('single-messages')//div[contains(@class, 'm-on')]//text()")
    Hello
    Hi, I am just writing to tell you how wonderful...
    <BLANKLINE>
    Hello from varlius
    Confirm your varlius registration!
    Click the l...

We click "Reject" button for the second message and get redirected to the same page.
app.post is used because of the bug in TestBrowser redirection behaviour.

    >>> action_url = browser.getControl('Reject', index=1).mech_form.action
    >>> res = app.post("/login",
    ...                params={'username': 'admin@uni.ututi.com', 'password': 'asdasd'})
    >>> res = app.post(action_url,
    ...                headers=[('referer', browser.url)])
    >>> print res.status, res.location
    302 Found http://localhost/group/moderators/mailinglist/administration

The second message was rejected so it is not shown in the moderation queue,
only the first message is left:

    >>> browser.reload()
    >>> browser.printQuery("id('single-messages')//div[contains(@class, 'm-on')]//text()") # doctest: -ELLIPSIS
    Hello
    Hi, I am just writing to tell you how wonderful...

The corresponding event is removed from the wall as well:

    >>> browser.getLink("News feed").click()
    >>> browser.printCssQuery(".event-heading .event-title", strip=True)
    <span>
      <a>Second user</a> has posted a new message <a>Hello</a> to the group's <a>Moderatoriai</a> moderation queue
    </span>
    <span>
      <a>Adminas Adminovix</a> has created the group <a>Moderatoriai</a>
    </span>
    <span>
      <a>Adminas Adminovix</a> has joined the group <a>Moderatoriai</a>
    </span>
    <span>
      <a>Third user</a> has joined the group <a>Moderatoriai</a>
    </span>

In the administration view one message is still left. Let's approve it:

    >>> browser.getLink('Moderation queue').click()
    >>> action_url = browser.getControl('Approve').mech_form.action
    >>> res = app.post(action_url,
    ...                headers=[('referer', browser.url)])
    >>> print res.status, res.location
    302 Found http://localhost/group/moderators/mailinglist/administration

Now the message should appear in the actual mailing list:

    >>> browser.getLink('News feed').click()
    >>> browser.printCssQuery('#wall-event-11 .event-content', strip=True)
    <span>Hi, I am just writing to tell you how wonderful this system is. <br />
      <br /> User2 <br />
    </span>

The corresponding event is removed from wall:

    >>> browser.getLink('News feed').click()
    >>> browser.printCssQuery(".event-heading .event-title", strip=True)
    <span>
      <a>Second user</a>
      <span>
        <a>Moderatoriai</a>
      </span>
    </span>
    <span>
      <a>Adminas Adminovix</a> has created the group <a>Moderatoriai</a>
    </span>
    <span>
      <a>Adminas Adminovix</a> has joined the group <a>Moderatoriai</a>
    </span>
    <span>
      <a>Third user</a> has joined the group <a>Moderatoriai</a>
    </span>

Approved messages got sent to the members of the group:

    >>> from ututi.lib.mailer import mail_queue
    >>> len(mail_queue)
    1

    >>> mail_queue[:] = []

Let us navigate to the navigation queue one more time. We see a message
saying that the queue is empty:

    >>> browser.getLink('Moderation queue').click()
    >>> browser.printQuery('//div[@class="no-messages"]//text()')
    No messages to be moderated yet.

Four more emails arrive. We can see them if we reload the page:

    >>> for id, subj in [(42, 'one'), (84, 'two'), (168, 'three'), (336, 'four')]:
    ...     send_test_message('email_from_non_ututi.txt', str(id), to='moderators@groups.ututi.lt', subject=subj)
    >>> browser.reload()
    >>> browser.printQuery("id('single-messages')//div[contains(@class, 'm-on')]//text()") # doctest: -ELLIPSIS
    one Confirm your varlius registration!  Click the l...
    two Confirm your varlius registration!  Click the l...
    three Confirm your varlius registration!  Click the l...
    four Confirm your varlius registration!  Click the l...

Let us click on the message to view it's text, and approve it from there.
We are redirected back to the moderation queue:

    >>> browser.getLink('one').click()
    >>> approve_url = browser.getControl('Approve').mech_form.action
    >>> reject_url = browser.getControl('Reject').mech_form.action
    >>> browser.getControl('Approve').click()
    >>> print browser.url
    http://localhost/group/moderators/mailinglist/administration

A flash message shows the title of the message, that has just been
approved:

    >>> browser.printQuery("//div[@class='flash-message']//text()")
    Message one has been approved.

And email was sent:

    >>> message = mail_queue.pop()

Attempts to manually approve or reject the same message result in
redirection to the moderation queue with an appropriate flash message:

    >>> browser.open(approve_url)
    >>> print browser.url
    http://localhost/group/moderators/mailinglist/administration
    >>> browser.printQuery("//div[@class='flash-message']//text()")
    Could not approve one as it was already approved.

    >>> browser.open(reject_url)
    >>> print browser.url
    http://localhost/group/moderators/mailinglist/administration
    >>> browser.printQuery("//div[@class='flash-message']//text()")
    Could not reject one as it was already approved.


We are not able to reject the message because it was already approved.
If we go back and click on the second message and reject it, we are again
redirected to moderation queue and an appropriate message is displayed:

    >>> browser.goBack()
    >>> browser.getLink('two').click()
    >>> approve_url = browser.getControl('Approve').mech_form.action
    >>> reject_url = browser.getControl('Reject').mech_form.action
    >>> browser.getControl('Reject').click()
    >>> print browser.url
    http://localhost/group/moderators/mailinglist/administration
    >>> browser.printQuery("//div[@class='flash-message']//text()")
    Message two has been rejected.

Attempts to approve or reject this message again will result in 404
errors, because the message is gone and lost forever:

    >>> browser.open(approve_url)
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found
    >>> browser.open(reject_url)
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

Let's go back to the moderation queue, and moderate third and fourth
messages via ajax calls. Appropriate message snippets are rendered:

    >>> browser.open('http://localhost/group/moderators/mailinglist/administration')
    >>> approve_url_1 = browser.getControl('Approve', index=0).mech_form.action + '?js=1'
    >>> approve_url_2 = browser.getControl('Approve', index=1).mech_form.action + '?js=1'
    >>> reject_url_1 = browser.getControl('Reject', index=0).mech_form.action + '?js=1'
    >>> reject_url_2 = browser.getControl('Reject', index=1).mech_form.action + '?js=1'
    >>> browser.open(approve_url_1)
    >>> print browser.contents
    <div class="approved-message">
      Message approved
    </div>

    >>> message = mail_queue.pop() # email was sent

    >>> browser.open(reject_url_2)
    >>> print browser.contents
    <div class="rejected-message">
      Message rejected
    </div>

If message was already approved, repeating ajax calls renders appropriate
warning messages:

    >>> browser.open(approve_url_1)
    >>> print browser.contents
    <div class="warning-message">
      Message already approved
    </div>
    >>> browser.open(reject_url_1)
    >>> print browser.contents
    <div class="warning-message">
      Message already approved
    </div>

For rejected messages, 404 are returned:

    >>> browser.open(approve_url_2)
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found
    >>> browser.open(reject_url_2)
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

If ututi administrator sends a message to the mailing list, it gets
through:

    >>> send_test_message('email_from_admin.txt', '78', to='moderators@groups.ututi.lt', subject='New teacher wants to be accepted')
    >>> mail_queue
    [<EmailInfo sender='Ututi <info@ututi.lt>' recipients=['admin@uni.ututi.com']>]

Clear the mail queue:

    >>> mail_queue[:] = []

XXX Assert that mailing queue is correct
XXX Test moderation events being sent through email.
XXX Test message approval via the wall (possibly in separate functional test).
